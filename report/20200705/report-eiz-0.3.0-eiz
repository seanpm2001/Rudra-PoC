[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/rt_queue.rs:105:1: 127:2'
source = '''
impl<T: Send> Drop for AtomicRing<T> {
    fn drop(&mut self) {
        let mut read_ptr = self.read_ptr.load(Ordering::SeqCst);
        let write_ptr = self.write_ptr.load(Ordering::SeqCst);

        while read_ptr < write_ptr {
            let read_masked = read_ptr & (self.length - 1);

            unsafe {
                drop((*self.buf.offset(read_masked as isize)).read());
            }

            read_ptr += 1;
        }

        unsafe {
            dealloc(
                self.buf as *mut u8,
                Layout::array::<MaybeUninit<T>>(self.length).unwrap(),
            )
        }
    }
}'''
