[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/interpreter/builder.rs:25:1: 38:2'
source = '''
impl<'a, Op> Drop for InterpreterBuilder<'a, Op>
where
    Op: OpResolver,
{
    fn drop(&mut self) {
        let handle = Box::into_raw(std::mem::take(&mut self.handle));
        #[allow(clippy::forget_copy, clippy::useless_transmute, deprecated)]
        unsafe {
            cpp!([handle as "InterpreterBuilder*"] {
                delete handle;
            });
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/interpreter/fbmodel.rs:21:1: 32:2'
source = '''
impl Drop for FlatBufferModel {
    fn drop(&mut self) {
        let handle = Box::into_raw(mem::take(&mut self.handle));

        #[allow(clippy::forget_copy, clippy::useless_transmute, deprecated)]
        unsafe {
            cpp!([handle as "FlatBufferModel*"] {
                delete handle;
            });
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/interpreter/ops/builtin/resolver.rs:16:1: 26:2'
source = '''
impl Drop for Resolver {
    #[allow(clippy::useless_transmute, clippy::forget_copy, deprecated)]
    fn drop(&mut self) {
        let handle = Box::into_raw(mem::take(&mut self.handle));
        unsafe {
            cpp!([handle as "BuiltinOpResolver*"] {
                delete handle;
            });
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/interpreter/mod.rs:35:1: 48:2'
source = '''
impl<'a, Op> Drop for Interpreter<'a, Op>
where
    Op: OpResolver,
{
    fn drop(&mut self) {
        let handle = Box::into_raw(mem::take(&mut self.handle));
        #[allow(clippy::forget_copy, clippy::useless_transmute, deprecated)]
        unsafe {
            cpp!([handle as "Interpreter*"] {
                delete handle;
            });
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/model/builtin_options.rs:20:1: 30:2'
source = '''
impl Drop for BuiltinOptionsUnion {
    fn drop(&mut self) {
        let ptr = self.value;
        #[allow(deprecated)]
        unsafe {
            cpp!([ptr as "flatbuffers::NativeTable*"] {
                delete ptr;
            });
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/model/stl/memory.rs:29:1: 38:2'
source = '''
impl<T> Drop for UniquePtr<T> {
    fn drop(&mut self) {
        #[allow(deprecated)]
        unsafe {
            cpp!([self as "std::unique_ptr<flatbuffers::NativeTable>*"] {
                self->reset();
            });
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/model/stl/vector.rs:182:1: 191:2'
source = '''
impl Drop for VectorOfBool {
    fn drop(&mut self) {
        #[allow(deprecated)]
        unsafe {
            cpp!([self as "const std::vector<bool>*"] {
                self->~vector<bool>();
            })
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/model/stl/vector.rs:271:1: 280:2'
source = '''
impl<T> Drop for VectorOfUniquePtr<T> {
    fn drop(&mut self) {
        #[allow(deprecated)]
        unsafe {
            cpp!([self as "const std::vector<std::unique_ptr<flatbuffers::NativeTable>>*"] {
                self->~vector<std::unique_ptr<flatbuffers::NativeTable>>();
            })
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/model/stl/vector_impl.rs:32:1: 40:2'
source = '''
impl Drop for VectorOfU8 {
    fn drop(&mut self) {
        unsafe {
            cpp!([self as "const std::vector<uint8_t>*"] {
                self->~vector<uint8_t>();
            })
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/model/stl/vector_impl.rs:155:1: 163:2'
source = '''
impl Drop for VectorOfI32 {
    fn drop(&mut self) {
        unsafe {
            cpp!([self as "const std::vector<int32_t>*"] {
                self->~vector<int32_t>();
            })
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/model/stl/vector_impl.rs:278:1: 286:2'
source = '''
impl Drop for VectorOfI64 {
    fn drop(&mut self) {
        unsafe {
            cpp!([self as "const std::vector<int64_t>*"] {
                self->~vector<int64_t>();
            })
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/model/stl/vector_impl.rs:401:1: 409:2'
source = '''
impl Drop for VectorOfF32 {
    fn drop(&mut self) {
        unsafe {
            cpp!([self as "const std::vector<float>*"] {
                self->~vector<float>();
            })
        }
    }
}'''
