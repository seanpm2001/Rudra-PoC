[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device.rs:50:1: 58:2'
source = '''
impl Drop for DataStream {
    fn drop(&mut self) {
        unsafe {
            livox_sys::LidarStopSampling(self.handle, Some(common_command_cb), 0 as *mut std::ffi::c_void);
        }

        (*DATA_PIPES.lock().unwrap()).remove(&self.handle);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sdk.rs:134:1: 149:2'
source = '''
impl Drop for Sdk {
    /// Un-inits the Livox SDK and kills all threads.
    fn drop(&mut self) {
        unsafe {
            livox_sys::Uninit();
        }

        // Kill the thread
        if let Some(handle) = self.handle.take() {
            self.kill.send(true).unwrap();
            handle.join().unwrap();
        }

        *BROADCAST_PIPE.lock().unwrap() = None;
    }
}'''
