[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/rwlock.rs:125:1: 133:2'
source = '''
impl<'l, T> Drop for RwLockReadGuard<'l, T> {
    fn drop(&mut self) {
        let mut guard = self.inner.manager.write_lock();
        guard.locks.get_mut(&self.inner.key).unwrap().unlock();
        if std::thread::panicking() {
            unsafe {(*(&self.inner as *const _ as *mut RwLock<T>)).poisoned = true};
        }
    }
}'''
