[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/app.rs:38:1: 44:2'
source = '''
impl Drop for AppConfig {
    fn drop(&mut self) {
        unsafe {
            ffi::newrelic_destroy_app_config(&mut self.inner);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/app.rs:102:1: 109:2'
source = '''
impl Drop for App {
    fn drop(&mut self) {
        unsafe {
            ffi::newrelic_destroy_app(&mut self.inner);
        }
        debug!("Destroyed app");
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/event.rs:85:1: 94:2'
source = '''
impl<'a> Drop for CustomEvent<'a> {
    /// If the custom event wasn't ever recorded, we should discard it
    /// to free the memory.
    fn drop(&mut self) {
        if !self.recorded {
            warn!("Dropping unrecorded custom event");
            unsafe { ffi::newrelic_discard_custom_event(&mut self.inner) };
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/segment.rs:368:1: 377:2'
source = '''
impl Drop for ExternalParams {
    fn drop(&mut self) {
        debug!("Reclaiming ExternalParams");
        unsafe {
            let _ = CString::from_raw(self.uri);
            drop_if_non_null!(self.procedure);
            drop_if_non_null!(self.library);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/segment.rs:550:1: 562:2'
source = '''
impl Drop for DatastoreParams {
    fn drop(&mut self) {
        debug!("Reclaiming DatastoreParams");
        unsafe {
            drop_if_non_null!(self.collection);
            drop_if_non_null!(self.operation);
            drop_if_non_null!(self.host);
            drop_if_non_null!(self.port_path_or_id);
            drop_if_non_null!(self.database_name);
            drop_if_non_null!(self.query);
        }
    }
}'''
