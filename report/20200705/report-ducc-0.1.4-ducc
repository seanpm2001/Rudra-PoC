[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/util.rs:372:1: 382:2'
source = '''
impl Drop for StackGuard {
    fn drop(&mut self) {
        let top = unsafe { ffi::duk_get_top(self.ctx) };

        if top > self.top {
            unsafe { ffi::duk_set_top(self.ctx, self.top); }
        } else if top < self.top {
            panic!("{} too many stack values popped", self.top - top);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ducc.rs:416:1: 430:2'
source = '''
impl Drop for Ducc {
    fn drop(&mut self) {
        if !self.is_top {
            return;
        }

        unsafe {
            let udata = get_udata(self.ctx);
            let any_map = get_any_map(self.ctx);
            ffi::duk_destroy_heap(self.ctx);
            Box::from_raw(udata);
            Box::from_raw(any_map);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/types.rs:26:1: 30:2'
source = '''
impl<'ducc> Drop for Ref<'ducc> {
    fn drop(&mut self) {
        unsafe { self.ducc.drop_ref(self); }
    }
}'''
