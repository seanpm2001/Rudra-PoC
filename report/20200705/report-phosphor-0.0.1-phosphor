[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/memory/xalloc.rs:262:1: 274:2'
source = '''
impl Drop for XallocMemoryPoolBlock {
    fn drop(&mut self) {
        if let Some(region) = &self.region {
            // TODO: no idea if this is safe
            unsafe {
                let mut a = self.allocator.write().unwrap();
                let mut region_copy: TlsfRegion<sys::Ptr> = MaybeUninit::uninit().assume_init();
                std::ptr::copy(region, &mut region_copy, 1);
                a.dealloc(region_copy).unwrap();
            }
        }
    }
}'''
