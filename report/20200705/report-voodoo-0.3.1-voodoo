[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/instance.rs:80:1: 94:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            if PRINT { println!("Destroying debug callback..."); }
            if let Some(callback) = self.debug_callback {
                self.loader.instance_proc_addr_loader().ext_debug_report
                    .vkDestroyDebugReportCallbackEXT(self.handle.0,
                    callback.to_raw(), ptr::null());
            }

            if PRINT { println!("Destroying instance..."); }
            self.loader.destroy_instance(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/swapchain.rs:120:1: 124:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe { self.device.destroy_swapchain_khr(self.handle, None); }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/image_view.rs:35:1: 41:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_image_view(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/pipeline_layout.rs:36:1: 42:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_pipeline_layout(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/shader_module.rs:84:1: 90:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_shader_module(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/render_pass.rs:35:1: 41:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_render_pass(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/graphics_pipeline.rs:14:1: 20:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_pipeline(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/framebuffer.rs:37:1: 45:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            // self.device.proc_addr_loader().vk.vkDestroyFramebuffer(self.device.handle().0,
            //     self.handle.0, ptr::null());
            self.device.destroy_framebuffer(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/surface.rs:80:1: 84:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe { self.instance.destroy_surface_khr(self.handle, None); }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/command_pool.rs:36:1: 42:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_command_pool(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/command_buffer.rs:40:1: 47:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.command_pool.device().free_command_buffers(self.command_pool.handle(),
                &[self.handle]);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/semaphore.rs:34:1: 40:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_semaphore(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/buffer.rs:34:1: 40:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_buffer(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/image.rs:37:1: 45:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            if !self.is_swapchain_image {
                self.device.destroy_image(self.handle, None);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sampler.rs:35:1: 41:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_sampler(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device_memory.rs:69:1: 73:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe { self.device.free_memory(self.handle, None); }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/descriptor_set_layout.rs:34:1: 40:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_descriptor_set_layout(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/descriptor_pool.rs:38:1: 44:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_descriptor_pool(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/event.rs:55:1: 61:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_event(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/fence.rs:55:1: 61:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        unsafe {
            self.device.destroy_fence(self.handle, None);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device.rs:97:1: 104:2'
source = '''
impl Drop for Inner {
    fn drop(&mut self) {
        if PRINT { println!("Destroying device..."); }
        unsafe {
            self.instance.destroy_device(self.handle, None);
        }
    }
}'''
