[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/backend/shader/mod.rs:247:1: 256:2'
source = '''
impl Drop for Program {
    fn drop(&mut self) {
        unsafe {
            // SAFETY: `id` was generated by OpenGL and `n` is one
            gl::DeleteProgram(self.id);
            gl::DeleteBuffers(1, &self.vbo);
            gl::DeleteVertexArrays(1, &self.vao);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/backend/shader/mod.rs:379:1: 388:2'
source = '''
impl Drop for DebugProgram {
    fn drop(&mut self) {
        unsafe {
            // SAFETY: `id` was generated by OpenGL and `n` is two
            gl::DeleteProgram(self.id);
            gl::DeleteBuffers(2, self.vbo.as_ptr());
            gl::DeleteVertexArrays(2, self.vao.as_ptr());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/backend/tex.rs:18:1: 27:2'
source = '''
impl Drop for RawTexture {
    fn drop(&mut self) {
        // SAFETY: `n` is `1` for all functions
        if self.has_framebuffer {
            unsafe { gl::DeleteFramebuffers(1, &self.framebuffer_id) }
            unsafe { gl::DeleteRenderbuffers(1, &self.depth_id) }
        }
        unsafe { gl::DeleteTextures(1, &self.id) }
    }
}'''
