[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/backing.rs:559:1: 570:2'
source = '''
impl Drop for ImportBacking {
    fn drop(&mut self) {
        // Properly drop the `vm::FuncCtx` in `vm::ImportedFunc`.
        for (_imported_func_index, imported_func) in (*self.vm_functions).iter_mut() {
            let func_ctx_ptr = imported_func.func_ctx.as_ptr();

            if !func_ctx_ptr.is_null() {
                let _: Box<vm::FuncCtx> = unsafe { Box::from_raw(func_ctx_ptr) };
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/instance.rs:41:1: 46:2'
source = '''
impl Drop for InstanceInner {
    fn drop(&mut self) {
        // Drop the vmctx.
        unsafe { Box::from_raw(self.vmctx) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/loader.rs:218:1: 224:2'
source = '''
impl Drop for CodeMemory {
    fn drop(&mut self) {
        unsafe {
            munmap(self.ptr as _, self.size);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sys/unix/memory.rs:223:1: 230:2'
source = '''
impl Drop for Memory {
    fn drop(&mut self) {
        if !self.ptr.is_null() {
            let success = unsafe { libc::munmap(self.ptr as _, self.size) };
            assert_eq!(success, 0, "failed to unmap memory: {}", errno::errno());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sys/unix/memory.rs:306:1: 316:2'
source = '''
impl Drop for RawFd {
    fn drop(&mut self) {
        let success = unsafe { libc::close(self.0) };
        assert_eq!(
            success,
            0,
            "failed to close mmapped file descriptor: {}",
            errno::errno()
        );
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/typed_func.rs:439:9: 446:10'
source = '''
impl Drop for AutoRelease {
            fn drop(&mut self) {
                unsafe {
                    TrampolineBufferBuilder::remove_global(self.ptr);
                    Box::from_raw(self.ctx);
                }
            }
        }'''
