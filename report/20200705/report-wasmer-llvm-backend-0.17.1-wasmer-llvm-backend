[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/backend.rs:450:1: 454:2'
source = '''
impl Drop for LLVMBackend {
    fn drop(&mut self) {
        unsafe { module_delete(self.module) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/code.rs:8618:1: 8640:2'
source = '''
impl Drop for LLVMModuleCodeGenerator<'_> {
    fn drop(&mut self) {
        // Ensure that all members of the context are dropped before we drop the context.
        drop(self.intrinsics.take());
        self.functions.clear();
        self.signatures.clear();
        assert!(
            Rc::strong_count(&*self.module) == 1,
            "references to module live while dropping LLVMModuleCodeGenerator"
        );
        unsafe {
            ManuallyDrop::drop(&mut self.personality_func);
            ManuallyDrop::drop(&mut self.module);
        };
        let context = self.context.take();
        match context {
            None => {}
            Some(context_ref) => unsafe {
                Box::from_raw(context_ref as *const Context as *mut Context);
            },
        }
    }
}'''
