[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:187:1: 206:2'
source = '''
impl<A: Discard> Drop for DiscardOnDrop<A> {
    #[inline]
    fn drop(&mut self) {
        // This only gets called if there is still a valid `A` inside the `ManuallyDrop`,
        // since in `leak()` we prevent `drop()` from being called.
        //
        // Similar to `leak()`, we want to move `A` out of `self` but again we can't,
        // this time because we only have a mutable reference, not a value.
        //
        // The solution is the same though, use `std::ptr::read()` to do the move,
        // the `A` will get dropped by `.discard()` and since we wrapped it in `ManuallyDrop`,
        // it won't be dropped again at the end of this function.
        //
        // TODO verify that this is completely safe
        unsafe {
            let value: A = ::std::ptr::read(self.0.deref());
            value.discard();
        }
    }
}'''
