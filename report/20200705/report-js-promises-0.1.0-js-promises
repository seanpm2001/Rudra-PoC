[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:397:1: 412:2'
source = '''
impl<TOk: Send, TErr: Send> Drop for Promise<TOk, TErr> {
	fn drop(&mut self) {
		// If nothing is receiving the value from this promise, set up a callback to release the unused
		// results to prevent leaking memory.
		if self.has_consumer {
			return;
		}
		self.p.then(|v: Result<stdweb::Value, stdweb::Value>| {
			match v {
				Ok(v) => drop(unsafe { js_unbox::<TOk>(v) }),
				Err(v) => drop(unsafe { js_unbox::<TErr>(v) }),
			}
			return stdweb::Value::Null;
		});
	}
}'''
