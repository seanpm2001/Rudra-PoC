[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/stock/std_ttable.rs:113:1: 122:2'
source = '''
impl<R> Drop for Bucket<R> {
    #[inline]
    fn drop(&mut self) {
        // Release the lock for the bucket.
        let info = unsafe { self.info.as_mut().unwrap() };
        let old = info.load(Ordering::Relaxed);
        let new = old & !BUCKET_LOCKING_FLAG;
        info.store(new, Ordering::Release);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/stock/std_ttable.rs:351:1: 357:2'
source = '''
impl<T: TtableEntry> Drop for StdTtable<T> {
    fn drop(&mut self) {
        unsafe {
            libc::free(self.alloc_ptr);
        }
    }
}'''
