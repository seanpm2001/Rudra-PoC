[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/atomics/atomic.rs:220:1: 229:2'
source = '''
impl<T> Drop for Atomic<T> {
    #[inline]
    fn drop(&mut self) {
        info!("Drop");
        // `Box::from_raw` requires unsafe, but since we own what it points to
        // And we do a `null` check we can `Box` it to drop without problems
        NonNull::new(self.0.swap(null_mut(), Ordering::Relaxed))
            .map_or((), |nn| drop(unsafe { Box::from_raw(nn.as_ptr()) }));
    }
}'''
