[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/fd.rs:37:1: 48:2'
source = '''
impl Drop for FdRaw {
    fn drop(&mut self) {
        if self.is_managed.get() {
            let rc = unsafe { libc::close(self.fd) };

            if rc < 0 {
                warn!("close({:?}) failed in drop(): {:?}", self,
                      Error::last_os_error());
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/dir.rs:23:1: 33:2'
source = '''
impl Drop for Dir {
    fn drop(&mut self)
    {
        let rc = unsafe { libc::closedir(self.dirp) };

        if rc < 0 {
            warn!("closedir({:?}) failed in drop(): {:?}", self,
                  Error::last_os_error());
        }
    }
}'''
