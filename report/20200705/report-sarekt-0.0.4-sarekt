[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/renderer/vulkan/vulkan_renderer/vulkan_core.rs:232:1: 252:2'
source = '''
impl Drop for VulkanCoreStructures {
  fn drop(&mut self) {
    unsafe {
      // TODO(issue#9) OFFSCREEN if there is one
      info!("Destrying surface...");
      let surface_functions = &self.surface_and_extension.surface_functions;
      let surface = self.surface_and_extension.surface;
      surface_functions.destroy_surface(surface, None);

      info!("Destroying debug messenger...");
      if let Some(dbum) = &self.debug_utils_and_messenger {
        dbum
          .debug_utils
          .destroy_debug_utils_messenger(dbum.messenger, None);
      }

      info!("Destroying renderer...");
      self.instance.destroy_instance(None);
    }
  }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/renderer/vulkan/vulkan_renderer/vulkan_core.rs:593:1: 600:2'
source = '''
impl Drop for VulkanDeviceStructures {
  fn drop(&mut self) {
    unsafe {
      info!("Destrying logical device...");
      self.logical_device.destroy_device(None);
    }
  }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/renderer/vulkan/vulkan_renderer/mod.rs:1108:1: 1159:2'
source = '''
impl Drop for VulkanRenderer {
  fn drop(&mut self) {
    unsafe {
      let logical_device = &self.vulkan_device_structures.logical_device;

      info!("Waiting for the device to be idle before cleaning up...");
      if let Err(e) = logical_device.device_wait_idle() {
        error!("Failed to wait for idle! {}", e);
      }

      info!("Destroying default null texture...");
      let default_texture = self.default_texture.take();
      std::mem::drop(default_texture);

      info!("Destroying all images, buffers, and associated synchronization semaphores...");
      self.buffer_image_store.write().unwrap().cleanup().unwrap();
      ManuallyDrop::drop(&mut self.buffer_image_store);

      info!("Destroying VMA...");
      Arc::get_mut(&mut self.allocator).unwrap().destroy();

      // TODO(issue#1) MULTITHREADING do I need to free others?
      info!("Freeing main command buffer...");
      logical_device.free_command_buffers(
        self.main_gfx_command_pool,
        &self.primary_gfx_command_buffers,
      );

      self
        .cleanup_swapchain(None)
        .expect("Could not clean up swapchain while cleaning up VulkanRenderer...");

      self
        .pipelines
        .cleanup_descriptor_set_layouts(logical_device);

      self.draw_synchronization.destroy_all();

      info!("Destroying all command pools...");
      logical_device.destroy_command_pool(self.main_gfx_command_pool, None);
      if self.main_gfx_command_pool != self.transfer_command_pool {
        logical_device.destroy_command_pool(self.transfer_command_pool, None);
      }

      info!("Destroying all shaders...");
      self.shader_store.write().unwrap().destroy_all_shaders();

      ManuallyDrop::drop(&mut self.vulkan_device_structures);
      ManuallyDrop::drop(&mut self.vulkan_core);
    }
  }
}'''
