[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/binary_heap.rs:247:1: 251:2'
source = '''
impl<'a, K, V: ?Sized> Drop for Hole<'a, K, V> {
    fn drop(&mut self) {
        unsafe { *self.data.get_unchecked_mut(self.item.as_ref().index) = self.item; }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/run_loop/task.rs:269:1: 281:2'
source = '''
impl<'a, T> Drop for Task<'a, T> {
    fn drop(&mut self) {
        unsafe {
            let node_ptr = self.node.to_executor_node_ptr();
            let list = node_ptr.as_ref().list_mut();
            if !list.is_null() {
                (**list).remove(node_ptr);
                *list = 0 as *mut _;
                Arc::from_raw(node_ptr.as_ptr());
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/run_loop/mod.rs:209:1: 222:2'
source = '''
impl Drop for RunLoop {
    fn drop(&mut self) {
        unsafe {
            (*self.pending_tasks.get()).clear(|node| {
                node.as_ref().run_loop_drop();
                Arc::from_raw(node.as_ptr());
            });
            (*self.waken_tasks.get()).clear(|node| {
                node.as_ref().run_loop_drop();
                Arc::from_raw(node.as_ptr());
            })
        }
    }
}'''
