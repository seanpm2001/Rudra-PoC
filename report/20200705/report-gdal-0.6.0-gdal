[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/raster/dataset.rs:32:1: 36:2'
source = '''
impl Drop for Dataset {
    fn drop(&mut self) {
        unsafe { gdal_sys::GDALClose(self.c_dataset); }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/spatial_ref/srs.rs:16:1: 21:2'
source = '''
impl Drop for CoordTransform {
    fn drop(&mut self) {
        unsafe { gdal_sys::OCTDestroyCoordinateTransformation(self.inner) };
        self.inner = ptr::null_mut();
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/spatial_ref/srs.rs:79:1: 84:2'
source = '''
impl Drop for SpatialRef {
    fn drop(&mut self){
        unsafe { gdal_sys::OSRRelease(self.0)};
        self.0 = ptr::null_mut();
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vector/dataset.rs:132:1: 136:2'
source = '''
impl Drop for Dataset {
    fn drop(&mut self) {
        unsafe { gdal_sys::OGR_DS_Destroy(self.c_dataset); }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vector/layer.rs:153:1: 157:2'
source = '''
impl Drop for FieldDefn {
    fn drop(&mut self) {
        unsafe { gdal_sys::OGR_Fld_Destroy(self.c_obj) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vector/feature.rs:163:1: 167:2'
source = '''
impl<'a> Drop for Feature<'a> {
    fn drop(&mut self) {
        unsafe { gdal_sys::OGR_F_Destroy(self.c_feature); }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vector/geometry.rs:250:1: 257:2'
source = '''
impl Drop for Geometry {
    fn drop(&mut self) {
        if self.owned {
            let c_geometry = self.c_geometry_ref.borrow();
            unsafe { gdal_sys::OGR_G_DestroyGeometry(c_geometry.unwrap()) };
        }
    }
}'''
