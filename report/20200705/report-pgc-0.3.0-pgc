[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:260:1: 266:2'
source = '''
impl<T> Drop for Handle<T> {
    fn drop(&mut self) {
        unsafe {
            std::ptr::drop_in_place(&mut self.handle);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:707:1: 718:2'
source = '''
impl Drop for Collector {
    fn drop(&mut self) {
        if unsafe { GC_STATS.load(Ordering::Relaxed) } {
            self.summary();
        }
        for item in self.heap.iter() {
            unsafe {
                let _ = Box::from_raw(item.ptr);
            }
        }
    }
}'''
