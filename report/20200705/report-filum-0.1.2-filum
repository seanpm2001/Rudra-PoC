[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/instance.rs:40:1: 48:2'
source = '''
impl Drop for Instance {
    fn drop(&mut self) {
        log_debug!("Drop Instance");
        unsafe {
            vkDestroyInstance(self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device.rs:37:1: 45:2'
source = '''
impl Drop for Device {
    fn drop(&mut self) {
        log_debug!("Drop Device");
        unsafe {
            vkDestroyDevice(self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device.rs:122:1: 132:2'
source = '''
impl Drop for BufferMemory {
    fn drop(&mut self) {
        unsafe {
            log_debug!("Drop BufferMemory");
            vkDestroyBuffer(self.device.handle(), self.buffer, ptr::null());
            self.buffer = ptr::null_mut();
            vkFreeMemory(self.device.handle(), self.memory, ptr::null());
            self.memory = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device.rs:166:1: 174:2'
source = '''
impl Drop for CommandPool {
    fn drop(&mut self) {
        log_debug!("Drop CommandPool");
        unsafe {
            vkDestroyCommandPool(self.device.handle(), self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device.rs:311:1: 319:2'
source = '''
impl Drop for ShaderModule {
    fn drop(&mut self) {
        log_debug!("Drop ShaderModule");
        unsafe {
            vkDestroyShaderModule(self.device.handle(), self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/dispatch.rs:144:1: 157:2'
source = '''
impl Drop for CommandDispatch {
    fn drop(&mut self) {
        log_debug!("Drop CommandDispatch");
        unsafe {
            let staging_buffer = self.compute_pipeline.staging_buffer();
            let command_pool = staging_buffer.command_pool();
            let device = command_pool.device();
            vkDestroyFence(device.handle(), self.fence, ptr::null());
            self.fence = ptr::null_mut();
            vkFreeCommandBuffers(device.handle(), command_pool.handle(), 1, &self.command_buffer);
            self.command_buffer = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/dispatch.rs:323:1: 341:2'
source = '''
impl Drop for ComputePipeline {
    fn drop(&mut self) {
        log_debug!("Drop ComputePipeline");
        unsafe {
            let command_pool = self.staging_buffer.command_pool();
            let device = command_pool.device();
            vkDestroyPipelineLayout(device.handle(), self.layout, ptr::null());
            self.layout = ptr::null_mut();
            vkDestroyDescriptorSetLayout(device.handle(), self.descriptor_set_layout, ptr::null());
            self.descriptor_set_layout = ptr::null_mut();
            vkDestroyDescriptorPool(device.handle(), self.descriptor_pool, ptr::null());
            self.descriptor_pool = ptr::null_mut();
            vkDestroyPipeline(device.handle(), self.handle, ptr::null());
            self.handle = ptr::null_mut();
            vkDestroyPipelineCache(device.handle(), self.cache, ptr::null());
            self.cache = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/dispatch.rs:487:1: 496:2'
source = '''
impl Drop for StagingBuffer {
    fn drop(&mut self) {
        log_debug!("Drop StagingBuffer");
        let device = self.command_pool.device();
        let host_buffer_memory = self.host_buffer_memory();
        unsafe {
            vkUnmapMemory(device.handle(), host_buffer_memory.memory());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/dispatch.rs:718:1: 734:2'
source = '''
impl Drop for StagingBufferRegion {
    fn drop(&mut self) {
        log_debug!("Drop StagingBufferRegion");
        unsafe {
            let command_pool = &self.command_pool;
            let device = command_pool.device();
            vkDestroyFence(device.handle(), self.host_to_device_fence, ptr::null());
            self.host_to_device_fence = ptr::null_mut();
            vkDestroyFence(device.handle(), self.device_to_host_fence, ptr::null());
            self.device_to_host_fence = ptr::null_mut();
            vkFreeCommandBuffers(device.handle(), command_pool.handle(), 1, &self.host_to_device_command);
            self.host_to_device_command = ptr::null_mut();
            vkFreeCommandBuffers(device.handle(), command_pool.handle(), 1, &self.device_to_host_command);
            self.device_to_host_command = ptr::null_mut();
        }
    }
}'''
