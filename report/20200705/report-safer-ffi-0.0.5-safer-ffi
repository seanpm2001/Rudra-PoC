[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/boxed.rs:51:1: 63:2'
source = '''
impl<T> Drop
    for Box<T>
{
    #[inline]
    fn drop (self: &'_ mut Box<T>)
    {
        unsafe {
            drop::<rust::Box<T>>(
                rust::Box::from_raw(self.0.as_mut_ptr())
            );
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/char_p.rs:473:5: 489:6'
source = '''
impl Drop for char_p_boxed {
        fn drop (self: &'_ mut char_p_boxed)
        {
            unsafe {
                if ptr::eq(self.0.as_mut_ptr().cast(), &EMPTY_SENTINEL) {
                    return;
                }
                let num_bytes = self.to_bytes_with_null().len();
                drop::<rust::Box<[u8]>>(
                    rust::Box::from_raw(slice::from_raw_parts_mut(
                        self.0.as_mut_ptr().cast(),
                        num_bytes,
                    ))
                );
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/arc.rs:136:5: 150:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $ArcDynFn_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.release)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/closure/boxed.rs:104:5: 117:6'
source = '''
impl<Ret $(, $A_N $(, $A_k)*)?> Drop
        for $BoxDynFnMut_N <Ret $(, $A_N $(, $A_k)*)?>
    where
        Ret : ReprC, $(
        $A_N : ReprC, $(
        $A_k : ReprC, )*)?
    {
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                (self.free)(self.env_ptr)
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/slice.rs:202:5: 219:6'
source = '''
impl<T> Drop
        for slice_boxed<T>
    {
        #[inline]
        fn drop (self: &'_ mut Self)
        {
            unsafe {
                drop::<rust::Box<[T]>>(
                    rust::Box::from_raw(
                        slice::from_raw_parts_mut(
                            self.ptr.as_mut_ptr(),
                            self.len,
                        )
                    )
                );
            }
        }
    }'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vec.rs:86:1: 99:2'
source = '''
impl<T> Drop
    for Vec<T>
{
    #[inline]
    fn drop (self: &'_ mut Vec<T>)
    {
        unsafe {
            drop::<rust::Vec<T>>(
                ptr::read(self) // ManuallyDrop::take()
                    .into()
            )
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vec.rs:175:9: 182:10'
source = '''
impl<T> Drop for Guard<'_, T> {
            fn drop (self: &'_ mut Self)
            {
                unsafe {
                    *self.1 = MD::new(MD::take(&mut self.0).into())
                }
            }
        }'''
