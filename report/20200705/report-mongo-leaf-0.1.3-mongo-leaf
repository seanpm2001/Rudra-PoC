[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/bsonc.rs:93:1: 102:2'
source = '''
impl Drop for Bsonc {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                bindings::bson_destroy(self.inner);
            }
            self.inner = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/change_stream.rs:69:1: 78:2'
source = '''
impl Drop for ChangeStreamc {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                bindings::mongoc_change_stream_destroy(self.inner);
            };
            self.inner = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/collection.rs:929:1: 938:2'
source = '''
impl Drop for Collectionc {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                bindings::mongoc_collection_destroy(self.inner);
            };
            self.inner = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/cursor.rs:129:1: 140:2'
source = '''
impl Drop for Cursorc {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                dbg!("cursor drop start");
                bindings::mongoc_cursor_destroy(dbg!(self.inner));
                self.inner = ptr::null_mut();
                dbg!("cursor drop done");
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/database.rs:68:1: 77:2'
source = '''
impl Drop for Databasec {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                bindings::mongoc_database_destroy(self.inner);
            }
            self.inner = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/read_concern.rs:121:1: 128:2'
source = '''
impl Drop for ReadConcernc {
    fn drop(&mut self) {
        assert!(!self.inner.is_null());
        unsafe {
            bindings::mongoc_read_concern_destroy(self.inner);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/read_prefs.rs:65:1: 72:2'
source = '''
impl Drop for ReadPrefsc {
    fn drop(&mut self) {
        assert!(!self.inner.is_null());
        unsafe {
            bindings::mongoc_read_prefs_destroy(self.inner);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/session.rs:112:1: 121:2'
source = '''
impl Drop for Sessionc {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                bindings::mongoc_client_session_destroy(self.inner);
            }
            self.inner = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/session_opts.rs:31:1: 40:2'
source = '''
impl Drop for SessionOptsc {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                bindings::mongoc_session_opts_destroy(self.inner);
                self.inner = ptr::null_mut();
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/transaction_opts.rs:26:1: 35:2'
source = '''
impl Drop for TransactionOptsc {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                bindings::mongoc_transaction_opts_destroy(self.inner);
                self.inner = ptr::null_mut();
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/write_concern.rs:90:1: 97:2'
source = '''
impl Drop for WriteConcernc {
    fn drop(&mut self) {
        assert!(!self.inner.is_null());
        unsafe {
            bindings::mongoc_write_concern_destroy(self.inner);
        }
    }
}'''
