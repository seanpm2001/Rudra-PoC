[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/tagged_ptr.rs:22:1: 30:2'
source = '''
impl<A,B,C,D,E,F,G,H> Drop for Packed<A,B,C,D,E,F,G,H> where
    A: Packable3, B: Packable3, C: Packable3, D: Packable3,
    E: Packable3, F: Packable3, G: Packable3, H: Packable3 {
    fn drop(&mut self) {
        unsafe {
            drop(self.decode());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/tagged_ptr.rs:144:1: 154:2'
source = '''
impl<'a,A,B,C,D,E,F,G,H> Drop for RefMut<'a,A,B,C,D,E,F,G,H> where
    A: Packable3, B: Packable3, C: Packable3, D: Packable3,
    E: Packable3, F: Packable3, G: Packable3, H: Packable3 {
    fn drop(&mut self) {
        unsafe {
            let changed = self.element.take().unwrap();
            self.orig.tagged_ptr = Packed::encode(&changed);
            mem::forget(changed);
        }
    }
}'''
