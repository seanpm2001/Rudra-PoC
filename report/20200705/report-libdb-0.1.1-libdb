[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/db.rs:89:1: 97:2'
source = '''
impl Drop for EnvironmentBuilder {
    fn drop(&mut self) {
        if ptr::null() != self.env_ptr {
            unsafe {
                ((*self.env_ptr).close.unwrap())(self.env_ptr, 0);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/db.rs:128:1: 136:2'
source = '''
impl Drop for Env {
    fn drop(&mut self) {
        if ptr::null() != self.env_ptr {
            unsafe {
                ((*self.env_ptr).close.unwrap())(self.env_ptr, 0);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/db.rs:448:1: 454:2'
source = '''
impl Drop for Db {
    fn drop(&mut self) {
        unsafe {
            ((*self.db).close.unwrap())(self.db, 0);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/db.rs:500:1: 509:2'
source = '''
impl Drop for Transaction {
    fn drop(&mut self) {
        if ptr::null() != self.txn_ptr {
            unsafe {
                // Nothing needs to be done if this fails...
                ((*self.txn_ptr).abort.unwrap())(self.txn_ptr);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/dbt.rs:37:1: 43:2'
source = '''
impl<'a> Drop for DBT<'a> {
    fn drop(&mut self) {
        if let &mut DBT::Ptr(ptr) = self {
            unsafe { libc::free(ptr.data as *mut c_void); }
        }
    }
}'''
