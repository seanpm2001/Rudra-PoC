[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/connection/mod.rs:864:1: 872:2'
source = '''
impl Drop for Connection {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiConn_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/context/mod.rs:165:1: 173:2'
source = '''
impl Drop for Context {
    fn drop(&mut self) {
        if !self.inner.as_ptr().is_null() {
            unsafe {
                externs::dpiContext_destroy(self.inner.as_ptr());
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/dequeue/mod.rs:325:1: 333:2'
source = '''
impl Drop for Options {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiDeqOptions_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/enqueue/mod.rs:105:1: 113:2'
source = '''
impl Drop for Options {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiEnqOptions_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lob/mod.rs:262:1: 270:2'
source = '''
impl Drop for Lob {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiLob_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/message/mod.rs:256:1: 264:2'
source = '''
impl Drop for Properties {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiMsgProps_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/object/mod.rs:232:1: 240:2'
source = '''
impl Drop for Object {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiObject_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/pool/mod.rs:294:1: 302:2'
source = '''
impl Drop for Pool {
    fn drop(&mut self) {
        if !self.inner.as_ptr().is_null() {
            unsafe {
                externs::dpiPool_release(self.inner.as_ptr());
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/rowid/mod.rs:61:1: 69:2'
source = '''
impl Drop for Rowid {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiRowid_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/statement/mod.rs:476:1: 484:2'
source = '''
impl Drop for Statement {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiStmt_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/subscription/mod.rs:66:1: 74:2'
source = '''
impl Drop for Subscription {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiSubscr_release(self.inner);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/variable/mod.rs:193:1: 201:2'
source = '''
impl Drop for Var {
    fn drop(&mut self) {
        if !self.inner.is_null() {
            unsafe {
                externs::dpiVar_release(self.inner);
            }
        }
    }
}'''
