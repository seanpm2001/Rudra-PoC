[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'heap_data.rs:93:1: 106:2'
source = '''
impl Drop for TaggedPtr {
    #[inline]
    fn drop(&mut self) {
        if let Ok(heap_allocation) = self.as_allocated() {
            let new_refcount = heap_allocation.decrement_refcount();
            if new_refcount == 0 {
                // Safety: weâ€™re dropping the last reference
                unsafe {
                    HeapAllocation::deallocate(self.0.as_ptr(), heap_allocation.data_capacity)
                }
            }
        }
    }
}'''
