[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/bitmap_glyph.rs:49:1: 59:2'
source = '''
impl Drop for BitmapGlyph {
	fn drop(&mut self) {
		let err = unsafe {
			ffi::FT_Done_Glyph(self.raw as ffi::FT_Glyph);
			ffi::FT_Done_Library(self.library_raw)
		};
		if err != ffi::FT_Err_Ok {
			panic!("Failed to drop library")
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/face.rs:355:1: 367:2'
source = '''
impl Drop for Face {
	fn drop(&mut self) {
		let err = unsafe { ffi::FT_Done_Face(self.raw) };
		if err != ffi::FT_Err_Ok {
			panic!("Failed to drop face");
		}
		let err = unsafe { ffi::FT_Done_Library(self.library_raw) };
		if err != ffi::FT_Err_Ok {
			panic!("Failed to drop library")
		}
		self.bytes = None;
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/glyph.rs:152:1: 162:2'
source = '''
impl Drop for Glyph {
	fn drop(&mut self) {
		let err = unsafe {
			ffi::FT_Done_Glyph(self.raw);
			ffi::FT_Done_Library(self.library_raw)
		};
		if err != ffi::FT_Err_Ok {
			panic!("Failed to drop library")
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/library.rs:167:1: 174:2'
source = '''
impl Drop for Library {
	fn drop(&mut self) {
		let err = unsafe { ffi::FT_Done_Library(self.raw) };
		if err != ffi::FT_Err_Ok {
			panic!("Failed to drop library")
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/stroker.rs:62:1: 72:2'
source = '''
impl Drop for Stroker {
	fn drop(&mut self) {
		let err = unsafe {
			ffi::FT_Stroker_Done(self.raw);
			ffi::FT_Done_Library(self.library_raw)
		};
		if err != ffi::FT_Err_Ok {
			panic!("Failed to drop library");
		}
	}
}'''
