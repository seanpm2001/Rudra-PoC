[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/primitives/atomic_cell.rs:50:1: 58:2'
source = '''
impl<T> Drop for Inner<T> {
    fn drop(&mut self) {
        let p = mem::replace(self.value.get_mut(), ptr::null_mut());
        unsafe {
            ptr::read(p);
            free(p);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/primitives/atomic_cell.rs:84:1: 90:2'
source = '''
impl<T> Drop for StorageCell<T> {
    fn drop(&mut self) {
        unsafe {
            free(self.get())
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/primitives/prepend_list.rs:60:1: 64:2'
source = '''
impl<T> Drop for PrependList<T> {
    fn drop(&mut self) {
        unsafe { Self::from_raw(self.0.swap(ptr::null_mut(), Ordering::Relaxed)) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/primitives/append_list.rs:80:1: 84:2'
source = '''
impl<T> Drop for AppendList<T> {
    fn drop(&mut self) {
        unsafe { Self::from_raw(mem::replace(self.0.get_mut(), ptr::null_mut())) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sync/mpsc_queue.rs:308:1: 316:2'
source = '''
impl<T, H: Handle<HandleInner=MpscQueueWrapper<T>>> Drop for MpscQueueReceiver<T, H> {
    fn drop(&mut self) {
        // Drain the channel of all pending messages
        self.0.with(|inner| unsafe {
            inner.close();
            inner.drain();
        })
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sync/mpsc_queue.rs:359:1: 364:2'
source = '''
impl<T, H: Handle<HandleInner=MpscQueueWrapper<T>>> Drop for MpscQueueSender<T, H> {
    fn drop(&mut self) {
        // Wake up the receiver
        self.0.with_mut(|inner, id| unsafe { inner.dec_sender_count(id) })
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sync/mpmc_queue.rs:354:1: 358:2'
source = '''
impl<T, H: Handle<HandleInner=MpmcQueueWrapper<T>>> Drop for MpmcQueueReceiver<T, H> {
    fn drop(&mut self) {
        self.0.with_mut(|inner, id| unsafe { inner.dec_receiver_count(id) })
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sync/mpmc_queue.rs:395:1: 400:2'
source = '''
impl<T, H: Handle<HandleInner=MpmcQueueWrapper<T>>> Drop for MpmcQueueSender<T, H> {
    fn drop(&mut self) {
        // Wake up the receiver
        self.0.with_mut(|inner, id| unsafe { inner.dec_sender_count(id) })
    }
}'''
