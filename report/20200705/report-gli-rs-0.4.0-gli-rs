[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sampler/sampler1d.rs:70:1: 77:2'
source = '''
impl Drop for gli::fsampler1D {

    fn drop(&mut self) {
        unsafe {
            bindings::destroy_sampler1d(self);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sampler/sampler1d_array.rs:70:1: 77:2'
source = '''
impl Drop for gli::fsampler1DArray {

    fn drop(&mut self) {
        unsafe {
            bindings::destroy_sampler1d_array(self);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sampler/sampler2d.rs:71:1: 78:2'
source = '''
impl Drop for gli::fsampler2D {

    fn drop(&mut self) {
        unsafe {
            bindings::destroy_sampler2d(self);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sampler/sampler2d_array.rs:71:1: 78:2'
source = '''
impl Drop for gli::fsampler2DArray {

    fn drop(&mut self) {
        unsafe {
            bindings::destroy_sampler2d_array(self);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sampler/sampler3d.rs:71:1: 78:2'
source = '''
impl Drop for gli::fsampler3D {

    fn drop(&mut self) {
        unsafe {
            bindings::destroy_sampler3d(self);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sampler/sampler_cube.rs:71:1: 78:2'
source = '''
impl Drop for gli::fsamplerCube {

    fn drop(&mut self) {
        unsafe {
            bindings::destroy_sampler_cube(self);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sampler/sampler_cube_array.rs:71:1: 78:2'
source = '''
impl Drop for gli::fsamplerCubeArray {

    fn drop(&mut self) {
        unsafe {
            bindings::destroy_sampler_cube_array(self);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/image.rs:110:1: 121:2'
source = '''
impl Drop for gli::image {

    fn drop(&mut self) {

        // Same with gli::texture class, gli::image class in C++ contains member wrapped with std::shared_ptr.
        // Rust can't dual with shared_ptr in ffi.
        // Manually call destructor to decrease its shared_ptr counter.
        unsafe {
            bindings::destroy_image(self)
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/texture.rs:191:1: 204:2'
source = '''
impl Drop for crate::ffi::root::gli::texture {

    fn drop(&mut self) {

        // In original gli::texture class(C++), it contains member wrapped with std::shared_ptr.
        // Here manually call destructor(`~texture()`) on texture object to decrease shared_ptr counter for its inner member.
        // Dangerous operation. This operation is not fully tested.
        // It does make sense since Rust can't dual with the class member with shared_ptr in texture class.
        // If you find better method to dual with this problem, welcome to create an issue on github.
        unsafe {
            bindings::destroy_texture(self)
        }
    }
}'''
