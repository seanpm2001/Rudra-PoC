[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/system/application.rs:73:1: 97:2'
source = '''
impl<CoreApp> Drop for Application<CoreApp>
where
    CoreApp: ApplicationTrait,
{
    #[cfg(not(target_os = "android"))]
    fn drop(&mut self) {
        logi!("Main system application got deleted.");
        unsafe {
            Box::from_raw(self.core_app);
        }
        unsafe {
            Box::from_raw(self.render_engine);
        }
        unsafe {
            Box::from_raw(self.os_app);
        }
    }
    #[cfg(target_os = "android")]
    fn drop(&mut self) {
        logi!("Main system application got deleted.");
        let _ = self.core_app;
        let _ = self.render_engine;
        let _ = self.os_app;
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/buffer.rs:132:1: 148:2'
source = '''
impl Drop for Buffer {
    fn drop(&mut self) {
        if self.main_buffer == null_mut() {
            return;
        }
        unsafe {
            vk::vkDestroyBuffer(self.logical_device.vk_data, self.staging_buffer, null());
            vk::vkFreeMemory(self.logical_device.vk_data, self.staging_memory, null());
            vk::vkDestroyBuffer(self.logical_device.vk_data, self.main_buffer, null());
            vk::vkFreeMemory(self.logical_device.vk_data, self.main_memory, null());
        }
        self.main_buffer = null_mut();
        self.main_memory = null_mut();
        self.staging_buffer = null_mut();
        self.staging_memory = null_mut();
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/command/pool.rs:34:1: 40:2'
source = '''
impl Drop for Pool {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyCommandPool(self.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/command/buffer.rs:118:1: 129:2'
source = '''
impl Drop for Buffer {
    fn drop(&mut self) {
        unsafe {
            vk::vkFreeCommandBuffers(
                self.pool.logical_device.vk_data,
                self.pool.vk_data,
                1,
                &mut self.vk_data,
            );
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/descriptor.rs:47:1: 53:2'
source = '''
impl Drop for Pool {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyDescriptorPool(self.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/device/logical.rs:74:1: 80:2'
source = '''
impl Drop for Logical {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyDevice(self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/image/view.rs:89:1: 95:2'
source = '''
impl Drop for View {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyImageView(self.image.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/image/mod.rs:57:1: 66:2'
source = '''
impl Drop for Image {
    fn drop(&mut self) {
        unsafe {
            if self.vk_mem != 0 as vk::VkDeviceMemory {
                vk::vkDestroyImage(self.logical_device.vk_data, self.vk_data, null());
            }
            vk::vkFreeMemory(self.logical_device.vk_data, self.vk_mem, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/pipeline.rs:54:1: 60:2'
source = '''
impl Drop for Layout {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyPipelineLayout(self.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/pipeline.rs:86:1: 92:2'
source = '''
impl Drop for Cache {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyPipelineCache(self.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/pipeline.rs:248:1: 254:2'
source = '''
impl Drop for Pipeline {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyPipeline(self.layout.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/shader/stage.rs:32:1: 38:2'
source = '''
impl Drop for Stage {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyShaderModule(self.logical_device.vk_data, self.module, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/synchronizer/semaphore.rs:27:1: 33:2'
source = '''
impl Drop for Semaphore {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroySemaphore(self.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/fence.rs:55:1: 61:2'
source = '''
impl Drop for Fence {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyFence(self.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/framebuffer.rs:52:1: 62:2'
source = '''
impl Drop for Framebuffer {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyFramebuffer(
                self.color_buffer.image.logical_device.vk_data,
                self.vk_data,
                null(),
            );
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/instance.rs:199:1: 220:2'
source = '''
impl Drop for Instance {
    fn drop(&mut self) {
        unsafe {
            #[cfg(not(feature = "no-vulkan-debug"))]
            {
                let vk_proc_name = CString::new("vkDestroyDebugReportCallbackEXT").unwrap();
                let vk_destroy_debug_report_callback_ext: vk::PFN_vkDestroyDebugReportCallbackEXT =
                    transmute(vk::vkGetInstanceProcAddr(self.vk_data, vk_proc_name.as_ptr()));
                if vk_destroy_debug_report_callback_ext == transmute(0usize) {
                    logf!("Error in finding vkDestroyDebugReportCallbackEXT process location.");
                }
                (vk_destroy_debug_report_callback_ext)(
                    self.vk_data,
                    self.vk_debug_callback,
                    null(),
                );
            }
            logi!("Instance is deleted now!");
            vk::vkDestroyInstance(self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/render_pass.rs:97:1: 103:2'
source = '''
impl Drop for RenderPass {
    fn drop(&mut self) {
        unsafe {
            vk::vkDestroyRenderPass(self.swapchain.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/surface.rs:85:1: 92:2'
source = '''
impl Drop for Surface {
    fn drop(&mut self) {
        unsafe {
            logi!("terminated {:?}", self.vk_data);
            vk::vkDestroySurfaceKHR(self.instance.vk_data, self.vk_data, null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vulkan/swapchain.rs:165:1: 172:2'
source = '''
impl Drop for Swapchain {
    fn drop(&mut self) {
        self.image_views.clear();
        unsafe {
            vk::vkDestroySwapchainKHR(self.logical_device.vk_data, self.vk_data, null());
        }
    }
}'''
