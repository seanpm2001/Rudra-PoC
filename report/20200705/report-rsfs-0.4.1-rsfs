[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/mem/unix.rs:1237:1: 1255:2'
source = '''
impl Drop for FileSystem {
    fn drop(&mut self) {
        if !self.pwd.alive && Raw::ptr_eq(&self.root, &self.pwd.inner) {
            // It appears we have dropped ourself already.
            return;
        }

        let mut todo = Vec::new();
        todo.push(self.root);
        while let Some(elem) = todo.pop() {
            let rs = unsafe { Box::from_raw(elem.ptr()) };
            if let DeKind::Dir(ref d) = rs.kind {
                for child in d.values() {
                    todo.push(*child);
                }
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/mem/unix.rs:1237:1: 1255:2'
source = '''
impl Drop for FileSystem {
    fn drop(&mut self) {
        if !self.pwd.alive && Raw::ptr_eq(&self.root, &self.pwd.inner) {
            // It appears we have dropped ourself already.
            return;
        }

        let mut todo = Vec::new();
        todo.push(self.root);
        while let Some(elem) = todo.pop() {
            let rs = unsafe { Box::from_raw(elem.ptr()) };
            if let DeKind::Dir(ref d) = rs.kind {
                for child in d.values() {
                    todo.push(*child);
                }
            }
        }
    }
}'''
