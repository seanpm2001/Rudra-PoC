[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/memory/buffer.rs:144:1: 153:2'
source = '''
impl Drop for BufferContext {
	fn drop(&mut self) {
		let vulkan = self.vulkan.get();

		unsafe {
			(vulkan.drop_buffer)(vulkan.device,self.buffer,null());
			(vulkan.drop_memory)(vulkan.device,self.memory,null());
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/image.rs:113:1: 123:2'
source = '''
impl Drop for ImageContext {
	fn drop(&mut self) {
		let vk = self.vulkan.get();

		unsafe {
			(vk.drop_image)(vk.device, self.image, null());
			(vk.drop_memory)(vk.device, self.memory, null());
			(vk.drop_imgview)(vk.device, self.view, null());
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/gpu/mod.rs:433:1: 487:2'
source = '''
impl Drop for GpuContext {
	fn drop(&mut self) -> () {
		// Load Function (Sampler)
		type VkDestroySampler = unsafe extern "system" fn(
			VkDevice, VkSampler, *const c_void) -> ();
		let destroy: VkDestroySampler = unsafe {
			sym(self, b"vkDestroySampler\0").unwrap()
		};

		// Run Function (Sampler)
		unsafe { destroy(self.device, self.sampler, null()) }

		// Load Function (Command Buffer & Command Pool)
		type VkDestroyCommandPool = unsafe extern "system" fn(
			VkDevice, u64, *const c_void) -> ();
		let destroy: VkDestroyCommandPool = unsafe {
			sym(self, b"vkDestroyCommandPool\0").unwrap()
		};

		// Run Function (Command Buffer & Command Pool)
		unsafe { destroy(self.device, self.command_pool, null()) }

		// Load Function (Surface)
		type VkDestroySurface = unsafe extern "system" fn(
			instance: VkInstance, surface: VkSurfaceKHR,
			pAllocator: *mut c_void) -> ();
		let destroy: VkDestroySurface = unsafe {
			sym(self, b"vkDestroySurfaceKHR\0").unwrap()
		};

		// Run Function (Surface)
		unsafe { destroy(self.vk, self.surface, null_mut()) }

		// Load Function
		type VkDestroyDevice = unsafe extern "system" fn(VkDevice,
			*const c_void) -> ();
		let destroy: VkDestroyDevice = unsafe {
			sym(self, b"vkDestroyDevice\0").unwrap()
		};

		// Run Function
		unsafe { destroy(self.device, null()) }

		// Load Function
		type VkDestroyInstance = unsafe extern "system" fn(
			instance: VkInstance, pAllocator: *mut c_void) -> ();
		let function_name = b"vkDestroyInstance\0";
		let destroy: VkDestroyInstance = unsafe {
			sym(self, function_name).unwrap()
		};

		// Run Function
		unsafe { destroy(self.vk, null_mut()) }
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/sprite.rs:271:1: 279:2'
source = '''
impl Drop for SpriteContext {
	fn drop(&mut self) {
		let vk = self.vulkan.get();

		unsafe {
			(vk.drop_descpool)(vk.device, self.desc_pool, null());
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/style.rs:321:1: 333:2'
source = '''
impl Drop for StyleContext {
	fn drop(&mut self) {
		let vk = self.vulkan.get();

		unsafe {
			(vk.drop_pipeline)(vk.device, self.pipeline, null());
			(vk.drop_pipeline_layout)(vk.device,
				self.pipeline_layout, null());
			(vk.drop_descset_layout)(vk.device, self.descsetlayout,
				null());
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/fence.rs:68:1: 72:2'
source = '''
impl Drop for FenceContext {
	fn drop(&mut self) {
		unsafe { drop(&self.vulkan, self.fence) }
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:911:1: 917:2'
source = '''
impl Drop for ShaderModule {
	fn drop(&mut self) -> () {
		unsafe {
			(self.2)(self.1, self.0, null());
		}
	}
}'''
