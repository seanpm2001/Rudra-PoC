[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/listener/listener.rs:285:1: 300:2'
source = '''
impl<'a> Drop for Listener<'a> {
	fn drop(&mut self) {
		unsafe {
			if alcMakeContextCurrent(ptr::null_mut()) != ALC_TRUE {
				al_panic!(self);
			}

			alcDestroyContext(self.context);
			al_panic!(self);

			if alcCloseDevice(self.device) != ALC_TRUE {
				al_panic!(self);
			}
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/capture/capture.rs:111:1: 118:2'
source = '''
impl<T: Sample> Drop for Capture<T> {
	fn drop(&mut self) {
		unsafe {
			alcCaptureCloseDevice(self.as_mut_ptr());
			al_panic!(self);
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/source/source.rs:365:1: 376:2'
source = '''
impl<'a> Drop for Source<'a> {
	fn drop(&mut self) {
		if self.state() != State::Playing && self.state() != State::Paused {
			self.stop();
		}

		unsafe {
			alDeleteSources(1, &self.id);
			al_panic!();
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/buffer.rs:105:1: 112:2'
source = '''
impl<'a> Drop for Buffer<'a> {
	fn drop(&mut self) {
		unsafe {
			alDeleteBuffers(1, &self.id);
			al_panic!();
		}
	}
}'''
