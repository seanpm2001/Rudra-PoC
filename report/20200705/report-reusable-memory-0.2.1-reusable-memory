[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/borrow/drain.rs:76:1: 96:2'
source = '''
impl<T> Drop for BorrowDrainIter<'_, '_, T> {
	fn drop(&mut self) {
		// exhaust self first
		self.for_each(drop);

		if self.tail_len > 0 {
			unsafe {
				let start = self.borrow.len();
				let tail = self.tail_start;
				// There is some tail left and we need to memmove it
				if start != tail {
					let src = self.borrow.as_ptr().add(tail);
					let dst = self.borrow.as_mut_ptr().add(start);
					std::ptr::copy(src, dst, self.tail_len);
				}

				self.borrow.set_len(start + self.tail_len);
			}
		}
	}
}'''
