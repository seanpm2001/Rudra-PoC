[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/core.rs:60:1: 66:2'
source = '''
impl Drop for Context {
    fn drop(&mut self) {
        unsafe {
            self._context.borrow_mut().destruct();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/memory.rs:41:1: 51:2'
source = '''
impl Drop for RegionToken {
    fn drop(&mut self) {
        unsafe {
            if self.cxx_delete {
                ffi::infinityhelpers::memory::delete_RegionToken(self._region_token);
            } else {
                ::std::mem::drop(Box::from_raw(self._region_token));
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/memory.rs:132:1: 141:2'
source = '''
impl Drop for Buffer {
    fn drop(&mut self) {
        unsafe {
            if let Some(mut _buffer) = (*self._buffer.get()).take() {
                ffi::infinity::memory::Buffer_Buffer_destructor(
                    _buffer.as_mut() as *mut _);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/memory.rs:167:1: 173:2'
source = '''
impl Drop for UnsafeBuffer {
    fn drop(&mut self) {
        unsafe {
            ffi::infinity::memory::Buffer_Buffer_destructor((*self._buffer.get()).as_mut() as *mut _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/queues.rs:210:1: 216:2'
source = '''
impl<'a> Drop for QueuePair<'a> {
    fn drop(&mut self) {
        unsafe {
            ffi::infinityhelpers::queues::delete_QueuePair(self._queue_pair);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/queues.rs:277:1: 283:2'
source = '''
impl<'a> Drop for QueuePairFactory<'a> {
    fn drop(&mut self) {
        unsafe {
            self._queue_pair_factory.destruct();
        }
    }
}'''
