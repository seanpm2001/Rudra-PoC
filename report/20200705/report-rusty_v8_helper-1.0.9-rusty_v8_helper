[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/object_wrap.rs:210:1: 234:2'
source = '''
impl<T> Drop for ObjectWrapInternal<T> {
    fn drop(&mut self) {
        let isolate = unsafe { self.isolate_handle.get_isolate_ptr().as_mut() };
        if isolate.is_none() {
            return;
        }
        let isolate = isolate.unwrap();
        let handle = &mut self.handle.borrow_mut();
        if handle.is_none() {
            return;
        }
        let mut handle = handle.take().unwrap();
        if handle.is_weak() {
            handle.clear_weak();
        }
        let object = handle.get_isolate(isolate);
        if object.is_none() {
            return;
        }
        let object = object.unwrap();
        let wrapped_ptr = unsafe { object.get_internal_field_ptr(1) } as *mut T;
        self.wrapping.borrow_mut().take();
        unsafe { Rc::from_raw(wrapped_ptr) };
    }
}'''
