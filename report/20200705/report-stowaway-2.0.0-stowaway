[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:455:1: 473:2'
source = '''
impl<T: Stowable> Drop for Stowaway<T> {
    fn drop(&mut self) {
        // TODO: Deduplicate drop, into_inner, and as_ref
        match Self::size_class() {
            // Safety: this box was previously created by Self::new
            Boxed | Zero => drop(unsafe { Box::from_raw(self.storage) }),
            Packed => {
                let storage = self.storage;
                let ptr_to_storage: *const *mut T = &storage;
                let ptr_to_value: *const T = ptr_to_storage as *const T;

                // Safety:
                //
                // - This value was previously placed in storage by a call to `new`
                drop(unsafe { ptr::read(ptr_to_value) });
            }
        }
    }
}'''
