[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:277:1: 281:2'
source = '''
impl<T: ?Sized + Refcounted> Drop for RefPtr<T> {
    fn drop(&mut self) {
        unsafe { T::Rc::dec_strong(self.ptr.as_ptr()) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:374:1: 382:2'
source = '''
impl<T: ?Sized> Drop for WeakPtr<T>
where
    T: Refcounted,
    T::Rc: WeakRefcount,
{
    fn drop(&mut self) {
        unsafe { T::Rc::dec_weak(self.ptr.as_ptr()) }
    }
}'''
