[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/admin.rs:383:1: 391:2'
source = '''
impl Drop for NativeEvent {
    fn drop(&mut self) {
        trace!("Destroying event: {:?}", self.ptr);
        unsafe {
            rdsys::rd_kafka_event_destroy(self.ptr);
        }
        trace!("Event destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/admin.rs:545:1: 553:2'
source = '''
impl Drop for NativeAdminOptions {
    fn drop(&mut self) {
        trace!("Destroying admin options: {:?}", self.ptr);
        unsafe {
            rdsys::rd_kafka_AdminOptions_destroy(self.ptr);
        }
        trace!("Admin options destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/admin.rs:730:1: 738:2'
source = '''
impl Drop for NativeNewTopic {
    fn drop(&mut self) {
        trace!("Destroying new topic: {:?}", self.ptr);
        unsafe {
            rdsys::rd_kafka_NewTopic_destroy(self.ptr);
        }
        trace!("New topic destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/admin.rs:792:1: 800:2'
source = '''
impl Drop for NativeDeleteTopic {
    fn drop(&mut self) {
        trace!("Destroying delete topic: {:?}", self.ptr);
        unsafe {
            rdsys::rd_kafka_DeleteTopic_destroy(self.ptr);
        }
        trace!("Delete topic destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/admin.rs:935:1: 943:2'
source = '''
impl Drop for NativeNewPartitions {
    fn drop(&mut self) {
        trace!("Destroying new partitions: {:?}", self.ptr);
        unsafe {
            rdsys::rd_kafka_NewPartitions_destroy(self.ptr);
        }
        trace!("New partitions destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/admin.rs:1082:1: 1090:2'
source = '''
impl Drop for NativeConfigResource {
    fn drop(&mut self) {
        trace!("Destroying config resource: {:?}", self.ptr);
        unsafe {
            rdsys::rd_kafka_ConfigResource_destroy(self.ptr);
        }
        trace!("Config resource destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/client.rs:106:1: 114:2'
source = '''
impl Drop for NativeClient {
    fn drop(&mut self) {
        trace!("Destroying client: {:p}", self.ptr);
        unsafe {
            rdsys::rd_kafka_destroy(self.ptr);
        }
        trace!("Client destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/client.rs:331:1: 339:2'
source = '''
impl Drop for NativeTopic {
    fn drop(&mut self) {
        trace!("Destroying NativeTopic: {:?}", self.ptr);
        unsafe {
            rdsys::rd_kafka_topic_destroy(self.ptr);
        }
        trace!("NativeTopic destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/client.rs:366:1: 374:2'
source = '''
impl Drop for NativeQueue {
    fn drop(&mut self) {
        trace!("Destroying queue: {:?}", self.ptr);
        unsafe {
            rdsys::rd_kafka_queue_destroy(self.ptr);
        }
        trace!("Queue destroyed: {:?}", self.ptr);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/config.rs:100:1: 105:2'
source = '''
impl Drop for NativeClientConfig {
    fn drop(&mut self) {
        trace!("Drop NativeClientConfig {:p}", self.ptr());
        unsafe { rdsys::rd_kafka_conf_destroy(self.ptr) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/consumer/base_consumer.rs:491:1: 497:2'
source = '''
impl<C: ConsumerContext> Drop for BaseConsumer<C> {
    fn drop(&mut self) {
        trace!("Destroying consumer: {:?}", self.client.native_ptr()); // TODO: fix me (multiple executions ?)
        unsafe { rdsys::rd_kafka_consumer_close(self.client.native_ptr()) };
        trace!("Consumer destroyed: {:?}", self.client.native_ptr());
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/consumer/stream_consumer.rs:61:1: 70:2'
source = '''
impl Drop for PolledMessagePtr {
    /// If the `PolledMessagePtr` is hasn't been transformed into a message and the pointer is
    /// still available, it will free the underlying resources.
    fn drop(&mut self) {
        if !self.message_ptr.is_null() {
            trace!("Destroy PolledPtr {:?}", self.message_ptr);
            unsafe { rdsys::rd_kafka_message_destroy(self.message_ptr) };
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/groups.rs:148:1: 152:2'
source = '''
impl Drop for GroupList {
    fn drop(&mut self) {
        unsafe { rdsys::rd_kafka_group_list_destroy(self.0) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/message.rs:358:1: 363:2'
source = '''
impl<'a> Drop for BorrowedMessage<'a> {
    fn drop(&mut self) {
        trace!("Destroying message {:?}", self);
        unsafe { rdsys::rd_kafka_message_destroy(self.ptr) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/message.rs:451:1: 455:2'
source = '''
impl Drop for OwnedHeaders {
    fn drop(&mut self) {
        unsafe { rdsys::rd_kafka_headers_destroy(self.ptr) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/metadata.rs:148:1: 152:2'
source = '''
impl Drop for Metadata {
    fn drop(&mut self) {
        unsafe { rdsys::rd_kafka_metadata_destroy(self.0) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/topic_partition_list.rs:306:1: 314:2'
source = '''
impl Drop for TopicPartitionList {
    fn drop(&mut self) {
        if !self.ptr.is_null() {
            trace!("Destroying TPL: {:?}", self.ptr);
            unsafe { rdsys::rd_kafka_topic_partition_list_destroy(self.ptr) }
            trace!("TPL destroyed: {:?}", self.ptr);
        }
    }
}'''
