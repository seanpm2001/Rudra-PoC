[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/pages.rs:296:1: 307:2'
source = '''
impl Drop for PageBox {
    fn drop(&mut self) {
        unsafe {
            assert!((*self.0).is_empty());

            ptr::drop_in_place(self.0);

            // Deallocate the memory.
            Vec::from_raw_parts(self.0 as *mut u8, 0, PAGE_SIZE);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/gcref.rs:39:1: 46:2'
source = '''
impl<'h, T: IntoHeapAllocation<'h>> Drop for GcRef<'h, T> {
    fn drop(&mut self) {
        unsafe {
            let heap = Heap::from_allocation::<T>(self.ptr);
            (*heap).unpin::<T>(self.ptr);
        }
    }
}'''
