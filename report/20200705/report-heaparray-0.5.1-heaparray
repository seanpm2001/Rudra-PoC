[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/base/base.rs:263:1: 272:2'
source = '''
impl<E, L, P> Drop for BaseArrayIter<E, L, P>
where
    P: BaseArrayPtr<E, L>,
{
    fn drop(&mut self) {
        let begin = self.array.get_ptr_mut(0) as usize;
        let len = ((self.end as usize) - begin) / mem::size_of::<E>();
        unsafe { self.array.drop(len) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/impls/generic.rs:46:1: 54:2'
source = '''
impl<E, L, P> Drop for SafeArray<E, L, P>
where
    P: SafeArrayPtr<E, L>,
{
    fn drop(&mut self) {
        let len = self.len();
        unsafe { self.data.drop(len) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/naive_rc/generic.rs:128:1: 141:2'
source = '''
impl<A, R, E, L> Drop for RcArray<A, R, E, L>
where
    A: LabelledArray<E, R>,
    R: RefCounter<L>,
{
    fn drop(&mut self) {
        let ref_count = self.data.get_label().decrement();
        if ref_count == 0 {
            unsafe {
                ptr::drop_in_place(&mut *self.data);
            }
        }
    }
}'''
