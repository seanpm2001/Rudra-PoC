[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/file_io/io.rs:292:1: 298:2'
source = '''
impl Drop for Guard<'_> {
	fn drop(&mut self) {
		unsafe {
			self.buf.set_len(self.len);
		}
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/file_io/sys/fd.rs:166:1: 175:2'
source = '''
impl Drop for FileDesc {
	fn drop(&mut self) {
		// Note that errors are ignored when closing a file descriptor. The
		// reason for this is that if an error occurs we don't actually know if
		// the file descriptor was closed or not, and if we retried (for
		// something like EINTR), we might close another valid file descriptor
		// opened after we closed ours.
		let _ = unsafe { libc::close(self.fd) };
	}
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/file_io/sys/fs.rs:202:1: 207:2'
source = '''
impl Drop for Dir {
	fn drop(&mut self) {
		let r = unsafe { libc::closedir(self.0) };
		debug_assert_eq!(r, 0);
	}
}'''
