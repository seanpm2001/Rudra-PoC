[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi.rs:67:1: 71:2'
source = '''
impl Drop for MallocCString {
    fn drop(&mut self) {
        unsafe { free(self.0 as *mut c_void) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/proxies.rs:91:1: 101:2'
source = '''
impl Drop for Proxies {
    fn drop(&mut self) {
        unsafe {
            // I don't fully understand it, but this (almost exactly) is what Vec does for dropping
            // its contained elements
            ptr::drop_in_place(self.as_mut_slice());

            free(self.data as *mut c_void)
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/factory.rs:112:1: 116:2'
source = '''
impl Drop for ProxyFactory {
    fn drop(&mut self) {
        unsafe { proxy_sys::px_proxy_factory_free(self.0) }
    }
}'''
