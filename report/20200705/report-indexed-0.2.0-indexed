[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:702:1: 722:2'
source = '''
impl<T:Indexed> Drop for Pool<T> {
    fn drop( &mut self ) {
        let len = self.chunks.len();
        if self.managed && len > 0 {
            for i in 0..len-1 {
                let chunk = unsafe{ self.chunks.get_unchecked_mut(i) };
                unsafe{ chunk.0.set_len( 0 ); }
                for j in 0..chunk_len::<T>() {
                    unsafe{ drop_in_place( &mut chunk[j] ); }
                }
            }
            unsafe {
                let last_chunk = self.chunks.get_unchecked_mut( len-1 );
                for j in 0..=self.subidx {
                    last_chunk.0.set_len( 0 );
                    drop_in_place( &mut last_chunk[ j ]);
                }
            }
        }
    }
}'''
