[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/pool.rs:140:1: 147:2'
source = '''
impl Drop for Entry {
    fn drop(&mut self) {
        // SAFETY: we forget about our own ticket directly after.
        // Besides, it would be technically Copy from within this module.
        let ticket = unsafe { ptr::read(&*self.ticket) };
        self.pool.tickets.borrow_mut().push(ticket);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:203:1: 209:2'
source = '''
impl Drop for RawRing {
    fn drop(&mut self) {
        unsafe {
            libc::close(self.fd);
        }
    }
}'''
