[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/frame.rs:182:1: 200:2'
source = '''
impl<'a, 'b, A> Drop for NestedFrame<'a, 'b, A>
where
    A: AtomBody + ?Sized,
{
    fn drop(&mut self) {
        let pad: &[u8] = match 8 - (self.parent.get_atom().size() % 8) {
            1 => &[0; 1],
            2 => &[0; 2],
            3 => &[0; 3],
            4 => &[0; 4],
            5 => &[0; 5],
            6 => &[0; 6],
            7 => &[0; 7],
            8 => &[0; 0],
            _ => panic!("invalid pad size"),
        };
        unsafe { self.parent.write_raw(pad).unwrap() };
    }
}'''
