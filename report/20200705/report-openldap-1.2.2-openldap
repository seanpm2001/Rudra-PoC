[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:112:1: 126:2'
source = '''
impl Drop for RustLDAP {
    fn drop(&mut self) {
        // Unbind the LDAP connection, making the C library free the LDAP*.
        let rc = unsafe { ldap_unbind_ext_s(self.ldap_ptr, ptr::null_mut(), ptr::null_mut()) };

        // Make sure it actually happened.
        if rc != codes::results::LDAP_SUCCESS {
            unsafe {
                // Hopefully this never happens.
                let raw_estr = ldap_err2string(rc as c_int);
                panic!(CStr::from_ptr(raw_estr).to_owned().into_string().unwrap());
            }
        }
    }
}'''
