[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/arq/arqstream.rs:212:1: 237:2'
source = '''
impl Drop for ArqStream {
    fn drop(&mut self) {
        // if we are already closed, we drop
        if !self.is_open() {
            return;
        }

        // Mark as closed for writing
        self.state.shutdown_write();

        // This will panic if a LocalPool is being used to
        // provide the asynchronous runtime. You cannot execute a
        // LocalPool executor from within another LocalPool executor.
        //
        // We recommend the use of either "tokio" or "async_std"
        // crates to provide your runtime environment.
        let tncref = self.tnc.clone();
        executor::block_on(async move {
            let mut tnc = tncref.lock().await;
            let _ = tnc.disconnect().await;
        });

        // Mark as fully disconnected
        self.state.shutdown_read();
    }
}'''
