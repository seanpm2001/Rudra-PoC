[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device.rs:77:1: 83:2'
source = '''
impl Drop for Device {
    fn drop(&mut self) {
        if let Err(e) = unsafe { api::mvncCloseDevice(self.handle) }.into_result() {
            eprintln!("::mvnc::device::Device::drop: Err({:?})", e);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/graph.rs:182:1: 188:2'
source = '''
impl<'a> Drop for Graph<'a> {
    fn drop(&mut self) {
        if let Err(e) = unsafe { api::mvncDeallocateGraph(self.handle) }.into_result() {
            eprintln!("::mvnc::graph::Graph::drop: Err({:?})", e);
        }
    }
}'''
