[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/bitmap.rs:46:1: 57:2'
source = '''
impl<T> Drop for Bitmap<T> {
    fn drop(&mut self) {
        let size = (self.width * self.height) as usize;
        let _pixels = unsafe {
            Vec::from_raw_parts(
                self.pixels,
                size,
                size,
            )
        };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/edge.rs:51:1: 55:2'
source = '''
impl Drop for EdgeHolder {
    fn drop(&mut self) {
        unsafe { self.raw.destruct(); }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/contour.rs:17:1: 21:2'
source = '''
impl Drop for Contour {
    fn drop(&mut self) {
        unsafe { ffi::msdfgen_Contour_destructor(&mut self.raw); }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/scanline.rs:41:1: 45:2'
source = '''
impl Drop for Scanline {
    fn drop(&mut self) {
        unsafe { ffi::msdfgen_Scanline_destructor(&mut self.raw) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/shape.rs:17:1: 21:2'
source = '''
impl Drop for Shape {
    fn drop(&mut self) {
        unsafe { ffi::msdfgen_Shape_destructor(&mut self.raw) }
    }
}'''
