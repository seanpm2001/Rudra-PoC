[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/api.rs:198:1: 206:2'
source = '''
impl<T: Trace + ?Sized> Drop for Rooted<T> {
    fn drop(&mut self) {
        unsafe {
            debug_assert!(!self.inner.is_null());
            let inner = &mut *self.inner;
            inner.counter = inner.counter.wrapping_sub(1);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/heap.rs:382:1: 391:2'
source = '''
impl Drop for Heap {
    fn drop(&mut self) {
        self.heap.iter().for_each(|item| unsafe {
            (&mut **item).value.finalize();
            std::ptr::drop_in_place(*item);
        });
        self.old_space.clear();
        self.new_space.clear();
    }
}'''
