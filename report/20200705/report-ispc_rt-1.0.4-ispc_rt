[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/task.rs:105:1: 119:2'
source = '''
impl Drop for Context {
    /// Release memory for all the tasks in this context
    ///
    /// **Note:** that because we're not really able to associate a call to ISPCAlloc
    /// with a specific Group care must be taken that the Context is not dropped
    /// until ISPCSync has been called on its handle and all Groups within have
    /// completed execution.
    fn drop(&mut self) {
        let mut mem = self.mem.lock().unwrap();
        for ptr in mem.drain(0..) {
            let m = ptr.load(atomic::Ordering::SeqCst);
            unsafe { aligned_alloc::aligned_free(m as *mut ()); }
        }
    }
}'''
