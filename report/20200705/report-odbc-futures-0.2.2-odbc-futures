[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/env.rs:62:1: 66:2'
source = '''
impl Drop for SqlEnvironment {
    fn drop(&mut self) {
        unsafe { self.dealloc_handle().unwrap() }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/conn.rs:20:1: 38:2'
source = '''
impl Drop for SqlConnection {
    fn drop(&mut self) {
        if self.is_connected {
            loop {
                let ret = unsafe { SQLDisconnect(self.handle) };
                match ret {
                    SQL_SUCCESS | SQL_SUCCESS_WITH_INFO => break,
                    SQL_STILL_EXECUTING => continue,
                    SQL_ERROR => {
                        let e = self.get_detailed_error(ret);
                        panic!("{}", e)
                    }
                    _ => panic!("Unexpected SQLDisconnect return code: {:?}", ret),
                };
            }
        }
        unsafe { self.dealloc_handle().unwrap() }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/stmt.rs:39:1: 43:2'
source = '''
impl Drop for SqlStatement {
    fn drop(&mut self) {
        unsafe { self.dealloc_handle().unwrap() }
    }
}'''
