[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/mmap.rs:101:1: 108:2'
source = '''
impl Drop for GrowableMemoryMap {
    fn drop(&mut self) {
        let res = unsafe { munmap(self.ptr as _, self.capacity) };
        if res != 0 {
            println!("could not unmap");
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:372:1: 380:2'
source = '''
impl<T> Drop for PoolInner<T> {
    fn drop(&mut self) {
        for i in 0..self.init {
            unsafe {
                let _ = ptr::read(self.entry(i));
            }
        }
    }
}'''
