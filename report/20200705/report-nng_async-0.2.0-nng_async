[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/asyncio/aio.rs:146:1: 155:2'
source = '''
impl Drop for NngAio {
    fn drop(&mut self) {
        unsafe {
            if !self.aio.is_null() {
                trace!("NngAio.drop {:x}", self.aio as u64);
                nng_aio_free(self.aio);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/asyncio/stream.rs:67:1: 72:2'
source = '''
impl Drop for NngStream {
    /// Close stream and release resources.
    fn drop(&mut self) {
        unsafe { nng_stream_free(self.stream) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/asyncio/stream.rs:191:1: 196:2'
source = '''
impl Drop for StreamListener {
    /// Close listener and release resources.
    fn drop(&mut self) {
        unsafe { nng_stream_listener_free(self.listener) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/asyncio/stream.rs:278:1: 283:2'
source = '''
impl Drop for StreamDialer {
    /// Close dialer and release resources.
    fn drop(&mut self) {
        unsafe { nng_stream_dialer_free(self.dialer) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ctx.rs:42:1: 52:2'
source = '''
impl Drop for NngCtx {
    fn drop(&mut self) {
        unsafe {
            let id = self.id();
            if id > 0 {
                trace!("NngCtx.drop {:x}", id);
                nng_ctx_close(self.ctx);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/mem/memory.rs:88:1: 97:2'
source = '''
impl Drop for Alloc {
    fn drop(&mut self) {
        if !self.ptr.is_null() {
            unsafe {
                let (ptr, size) = self.take_unsafe();
                nng_free(ptr, size);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/mem/string.rs:57:1: 63:2'
source = '''
impl Drop for NngString {
    fn drop(&mut self) {
        unsafe {
            nng_strfree(self.pointer);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/msg.rs:204:1: 213:2'
source = '''
impl Drop for NngMsg {
    fn drop(&mut self) {
        unsafe {
            if !self.msg.is_null() {
                trace!("Dropping {:x}", self.msg as u64);
                nng_msg_free(self.msg);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/socket.rs:335:1: 351:2'
source = '''
impl Drop for InnerSocket {
    fn drop(&mut self) {
        unsafe {
            trace!("Socket close: {:?}", self.socket);
            let res = nng_int_to_result(nng_close(self.socket));
            match res {
                Ok(()) => {}
                // Can't panic here.  Thrift's TIoChannel::split() clones the socket handle so we may get ECLOSED
                Err(Error::Errno(NngErrno::ECLOSED)) => {}
                Err(res) => {
                    debug!("nng_close {:?}", res);
                    panic!("nng_close {:?}", res);
                }
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/stats.rs:91:1: 98:2'
source = '''
impl Drop for NngStatRoot {
    fn drop(&mut self) {
        unsafe {
            trace!("Drop NngStatRoot");
            nng_stats_free(self.node)
        }
    }
}'''
