[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:104:1: 112:2'
source = '''
impl<'a> Drop for MeRefHandle<'a> {
    fn drop(&mut self) {
        if !self.is_source { return };
        let c = self.ctx.count.get();
        unsafe {
            *c -= 1;
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:147:1: 155:2'
source = '''
impl<'a> Drop for MeRefMutHandle<'a> {
    fn drop(&mut self) {
        if !self.is_source { return };
        let is_mut = self.ctx.is_mut.get();
        unsafe {
            *is_mut = false;
        }
    }
}'''
