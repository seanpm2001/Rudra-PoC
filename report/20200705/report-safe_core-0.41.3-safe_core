[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/req.rs:70:1: 81:2'
source = '''
impl Drop for AppExchangeInfo {
    fn drop(&mut self) {
        unsafe {
            let _ = CString::from_raw(self.id as *mut _);
            if !self.scope.is_null() {
                let _ = CString::from_raw(self.scope as *mut _);
            }
            let _ = CString::from_raw(self.name as *mut _);
            let _ = CString::from_raw(self.vendor as *mut _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/req.rs:92:1: 98:2'
source = '''
impl Drop for ContainerPermissions {
    fn drop(&mut self) {
        unsafe {
            let _ = CString::from_raw(self.cont_name as *mut _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/req.rs:124:1: 133:2'
source = '''
impl Drop for AuthReq {
    fn drop(&mut self) {
        unsafe {
            let _ = vec_from_raw_parts(
                self.containers as *mut ContainerPermissions,
                self.containers_len,
            );
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/req.rs:146:1: 155:2'
source = '''
impl Drop for ContainersReq {
    fn drop(&mut self) {
        unsafe {
            let _ = vec_from_raw_parts(
                self.containers as *mut ContainerPermissions,
                self.containers_len,
            );
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/req.rs:179:1: 185:2'
source = '''
impl Drop for ShareMDataRequest {
    fn drop(&mut self) {
        unsafe {
            let _ = vec_from_raw_parts(self.mdata as *mut ShareMData, self.mdata_len);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/resp.rs:37:1: 44:2'
source = '''
impl Drop for AppKeys {
    fn drop(&mut self) {
        unsafe {
            let _ = vec_from_raw_parts(self.full_id as *mut u8, self.full_id_len);
            let _ = vec_from_raw_parts(self.enc_secret_key as *mut u8, self.enc_secret_key_len);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/resp.rs:69:1: 75:2'
source = '''
impl Drop for ContainerInfo {
    fn drop(&mut self) {
        unsafe {
            let _ = CString::from_raw(self.name as *mut _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/resp.rs:86:1: 92:2'
source = '''
impl Drop for AccessContainerEntry {
    fn drop(&mut self) {
        unsafe {
            let _ = vec_from_raw_parts(self.containers as *mut ContainerInfo, self.containers_len);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/resp.rs:110:1: 116:2'
source = '''
impl Drop for AuthGranted {
    fn drop(&mut self) {
        unsafe {
            let _ = vec_from_raw_parts(self.bootstrap_config as *mut u8, self.bootstrap_config_len);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/resp.rs:135:1: 147:2'
source = '''
impl Drop for AppAccess {
    fn drop(&mut self) {
        unsafe {
            if !self.name.is_null() {
                let _ = CString::from_raw(self.name as *mut _);
            }

            if !self.app_id.is_null() {
                let _ = CString::from_raw(self.app_id as *mut _);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/resp.rs:178:1: 190:2'
source = '''
impl Drop for MetadataResponse {
    fn drop(&mut self) {
        unsafe {
            if !self.name.is_null() {
                let _ = CString::from_raw(self.name as *mut _);
            }

            if !self.description.is_null() {
                let _ = CString::from_raw(self.description as *mut _);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/resp.rs:202:1: 207:2'
source = '''
impl Drop for MDataKey {
    #[allow(unsafe_code)]
    fn drop(&mut self) {
        let _ = unsafe { vec_from_raw_parts(self.key as *mut u8, self.key_len) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/ipc/resp.rs:221:1: 226:2'
source = '''
impl Drop for MDataValue {
    #[allow(unsafe_code)]
    fn drop(&mut self) {
        let _ = unsafe { vec_from_raw_parts(self.content as *mut u8, self.content_len) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/nfs.rs:34:1: 39:2'
source = '''
impl Drop for File {
    fn drop(&mut self) {
        let _ =
            unsafe { vec_from_raw_parts(self.user_metadata as *mut u8, self.user_metadata_len) };
    }
}'''
