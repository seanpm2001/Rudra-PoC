[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/boxed.rs:495:1: 509:2'
source = '''
impl<T: 'static, MM: BoxedMemoryManager<T>> Drop for Boxed<T, MM> {
    #[inline]
    fn drop(&mut self) {
        unsafe {
            match self.inner {
                AnyBox::Foreign(ptr) => {
                    MM::free(ptr.as_ptr());
                }
                AnyBox::Native(ref mut box_) => {
                    MM::clear(&mut **box_);
                }
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/shared.rs:308:1: 314:2'
source = '''
impl<T, MM: SharedMemoryManager<T>> Drop for Shared<T, MM> {
    fn drop(&mut self) {
        unsafe {
            MM::unref(self.inner.as_ptr());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/object.rs:186:1: 192:2'
source = '''
impl<T: IsClassFor> Drop for ClassRef<T> {
    fn drop(&mut self) {
        unsafe {
            gobject_sys::g_type_class_unref(self.0.as_ptr() as *mut _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/object.rs:418:1: 424:2'
source = '''
impl Drop for ObjectRef {
    fn drop(&mut self) {
        unsafe {
            gobject_sys::g_object_unref(self.inner.as_ptr());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/object.rs:2198:1: 2204:2'
source = '''
impl<T: ObjectType> Drop for WeakRef<T> {
    fn drop(&mut self) {
        unsafe {
            gobject_sys::g_weak_ref_clear(mut_override(&*self.0));
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/enums.rs:152:1: 158:2'
source = '''
impl Drop for EnumClass {
    fn drop(&mut self) {
        unsafe {
            gobject_sys::g_type_class_unref(self.0 as *mut _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/enums.rs:525:1: 531:2'
source = '''
impl Drop for FlagsClass {
    fn drop(&mut self) {
        unsafe {
            gobject_sys::g_type_class_unref(self.0 as *mut _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/translate.rs:840:1: 844:2'
source = '''
impl Drop for List {
    fn drop(&mut self) {
        unsafe { glib_sys::g_list_free(self.0) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/translate.rs:920:1: 924:2'
source = '''
impl Drop for SList {
    fn drop(&mut self) {
        unsafe { glib_sys::g_slist_free(self.0) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/translate.rs:978:1: 982:2'
source = '''
impl Drop for HashTable {
    fn drop(&mut self) {
        unsafe { glib_sys::g_hash_table_unref(self.0) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/translate.rs:1013:1: 1019:2'
source = '''
impl Drop for Array {
    fn drop(&mut self) {
        unsafe {
            glib_sys::g_array_unref(self.0);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/translate.rs:1068:1: 1074:2'
source = '''
impl Drop for PtrArray {
    fn drop(&mut self) {
        unsafe {
            glib_sys::g_ptr_array_unref(self.0);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/gstring.rs:87:1: 95:2'
source = '''
impl Drop for GString {
    fn drop(&mut self) {
        if let GString(Inner::Foreign(ptr, _len)) = self {
            unsafe {
                glib_sys::g_free(*ptr as *mut _);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/value.rs:290:1: 298:2'
source = '''
impl Drop for Value {
    fn drop(&mut self) {
        // Before GLib 2.48, unsetting a zeroed GValue would give critical warnings
        // https://bugzilla.gnome.org/show_bug.cgi?id=755766
        if self.type_() != Type::Invalid {
            unsafe { gobject_sys::g_value_unset(self.to_glib_none_mut().0) }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/value.rs:574:1: 586:2'
source = '''
impl Drop for ValueArray {
    fn drop(&mut self) {
        unsafe {
            for value in &mut self.0 {
                // Before GLib 2.48, unsetting a zeroed GValue would give critical warnings
                // https://bugzilla.gnome.org/show_bug.cgi?id=755766
                if value.g_type != gobject_sys::G_TYPE_INVALID {
                    gobject_sys::g_value_unset(value);
                }
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/variant_type.rs:45:1: 49:2'
source = '''
impl Drop for VariantType {
    fn drop(&mut self) {
        unsafe { glib_sys::g_variant_type_free(self.ptr) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/thread_pool.rs:164:1: 170:2'
source = '''
impl Drop for ThreadPool {
    fn drop(&mut self) {
        unsafe {
            glib_sys::g_thread_pool_free(self.0.as_ptr(), glib_sys::GFALSE, glib_sys::GTRUE);
        }
    }
}'''
