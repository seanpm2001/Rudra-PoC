[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/atom.rs:422:1: 428:2'
source = '''
impl Drop for Atom {
    fn drop(&mut self) {
        unsafe {
            let _ = chfl_free(self.as_ptr() as *const _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/cell.rs:383:1: 389:2'
source = '''
impl Drop for UnitCell {
    fn drop(&mut self) {
        unsafe {
            let _ = chfl_free(self.as_ptr() as *const _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/residue.rs:307:1: 313:2'
source = '''
impl Drop for Residue {
    fn drop(&mut self) {
        unsafe {
            let _ = chfl_free(self.as_ptr() as *const _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/topology.rs:732:1: 738:2'
source = '''
impl Drop for Topology {
    fn drop(&mut self) {
        unsafe {
            let _ = chfl_free(self.as_ptr() as *const _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/frame.rs:839:1: 845:2'
source = '''
impl Drop for Frame {
    fn drop(&mut self) {
        unsafe {
            let _ = chfl_free(self.as_ptr() as *const _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/trajectory.rs:287:1: 293:2'
source = '''
impl Drop for Trajectory {
    fn drop(&mut self) {
        unsafe {
            let _ = chfl_trajectory_close(self.as_ptr());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/selection.rs:124:1: 130:2'
source = '''
impl Drop for Selection {
    fn drop(&mut self) {
        unsafe {
            let _ = chfl_free(self.as_ptr() as *const _);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/property.rs:100:1: 106:2'
source = '''
impl Drop for RawProperty {
    fn drop(&mut self) {
        unsafe {
            let _ = chfl_free(self.as_ptr() as *const _);
        }
    }
}'''
