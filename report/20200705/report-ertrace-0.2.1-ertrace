[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ertrace.rs:130:1: 148:2'
source = '''
impl Drop for Ertrace {
    fn drop(&mut self) {
        // NOTE: this is safe because
        //   1) the pointer to this ErtraceNode is valid, and
        //   2) we control access to the only other pointer to this ErtraceNode,
        //   and can guarantee that it is not converted into a mutable reference while
        //   this mutable reference exists.
        let tail = unsafe { self.tail.as_mut() };
        loop {
            let old_next = FREE_LIST.load(Ordering::Acquire);
            tail.next.store(old_next, Ordering::Relaxed);
            if FREE_LIST.compare_and_swap(old_next, self.head.as_ptr(), Ordering::Release)
                == old_next
            {
                return;
            }
        }
    }
}'''
