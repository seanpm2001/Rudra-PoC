[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/dmsort.rs:201:1: 214:2'
source = '''
impl<'a, T> Drop for DmSorter<'a, T> {
	fn drop(&mut self) {
		if self.dropped.is_empty() { return; }
		unsafe {
			// This code will only run on stack-unwind (panic).

			// Move back all elements into the slice:
			ptr::copy_nonoverlapping(self.dropped.as_ptr(), &mut self.slice[self.write], self.dropped.len());

			// Make sure the objects aren't destroyed when self.dropped is dropped (avoid-double-free).
			self.dropped.set_len(0);
		}
	}
}'''
