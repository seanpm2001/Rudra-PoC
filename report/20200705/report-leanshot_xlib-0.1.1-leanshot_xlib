[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/cursor.rs:9:1: 13:2'
source = '''
impl Drop for Cursor {
    fn drop(&mut self) {
        unsafe { x::XFreeCursor(self.display, self.inner) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/display.rs:165:1: 169:2'
source = '''
impl Drop for Display {
    fn drop(&mut self) {
        unsafe { x::XCloseDisplay(self.inner) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/display.rs:171:1: 175:2'
source = '''
impl Drop for Grab {
    fn drop(&mut self) {
        unsafe { x::XUngrabServer(self.0) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/event.rs:38:1: 42:2'
source = '''
impl Drop for Event {
    fn drop(&mut self) {
        unsafe { libc::free(self.inner as *mut libc::c_void) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/image.rs:65:1: 69:2'
source = '''
impl Drop for Image {
    fn drop(&mut self) {
        unsafe { x::XDestroyImage(self.inner) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/window.rs:166:1: 170:2'
source = '''
impl Drop for WindowAttributes {
    fn drop(&mut self) {
        unsafe { libc::free(self.inner as *mut libc::c_void) };
    }
}'''
