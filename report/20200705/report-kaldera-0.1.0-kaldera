[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/xcb/impls.rs:48:1: 54:2'
source = '''
impl Drop for XcbConnection {
    fn drop(&mut self) {
        unsafe {
            xcb_disconnect(self.handle);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ffi/xcb/impls.rs:184:1: 190:2'
source = '''
impl<'a> Drop for XcbEvent<'a> {
    fn drop(&mut self) {
        unsafe {
            libc::free(self.handle as *mut c_void);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/instance.rs:63:1: 71:2'
source = '''
impl Drop for Instance {
    fn drop(&mut self) {
        log_debug!("Drop Instance");
        unsafe {
            vkDestroyInstance(self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/surface.rs:128:1: 136:2'
source = '''
impl Drop for XcbSurface {
    fn drop(&mut self) {
        log_debug!("Drop XcbSurface");
        unsafe {
            let instance = &self.instance;
            vkDestroySurfaceKHR(instance.handle(), self.handle, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/device.rs:39:1: 47:2'
source = '''
impl Drop for Device {
    fn drop(&mut self) {
        log_debug!("Drop Device");
        unsafe {
            vkDestroyDevice(self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/device.rs:82:1: 90:2'
source = '''
impl Drop for CommandPool {
    fn drop(&mut self) {
        log_debug!("Drop CommandPool");
        unsafe {
            vkDestroyCommandPool(self.queue().device().handle(), self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/device.rs:211:1: 223:2'
source = '''
impl Drop for CommandBuffer {
    fn drop(&mut self) {
        log_debug!("Drop CommandBuffer");
        unsafe {
            let command_pool = &self.command_pool;
            let device = command_pool.queue().device();
            vkDestroyFence(device.handle(), self.fence, ptr::null());
            self.fence = ptr::null_mut();
            vkFreeCommandBuffers(device.handle(), command_pool.handle(), 1, &self.handle);
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/device.rs:342:1: 350:2'
source = '''
impl Drop for ShaderModule {
    fn drop(&mut self) {
        log_debug!("Drop ShaderModule");
        unsafe {
            vkDestroyShaderModule(self.device.handle(), self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/memory.rs:84:1: 94:2'
source = '''
impl Drop for BufferMemory {
    fn drop(&mut self) {
        unsafe {
            log_debug!("Drop BufferMemory");
            vkDestroyBuffer(self.device.handle(), self.buffer, ptr::null());
            self.buffer = ptr::null_mut();
            vkFreeMemory(self.device.handle(), self.memory, ptr::null());
            self.memory = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/memory.rs:233:1: 241:2'
source = '''
impl Drop for ImageMemory {
    fn drop(&mut self) {
        unsafe {
            log_debug!("Drop ImageMemory");
            vkFreeMemory(self.device.handle(), self.handle, ptr::null());
            self.handle = ptr::null_mut();
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/memory.rs:360:1: 368:2'
source = '''
impl Drop for DedicatedBufferMemory {
    fn drop(&mut self) {
        unsafe {
            log_debug!("Drop DedicatedBufferMemory");
            vkDestroyBuffer(self.device.handle(), self.buffer, ptr::null());
            vkFreeMemory(self.device.handle(), self.memory, ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/image.rs:174:1: 185:2'
source = '''
impl Drop for ColorImage {
    fn drop(&mut self) {
        log_debug!("Drop ColorImage");
        unsafe {
            let device = &self.device;
            vkDestroySampler(device.handle(), self.sampler, std::ptr::null());
            vkDestroyImageView(device.handle(), self.view, std::ptr::null());
            // TODO(?): ImageMemory timing
            vkDestroyImage(device.handle(), self.image, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/image.rs:301:1: 311:2'
source = '''
impl Drop for DepthStencilImage {
    fn drop(&mut self) {
        log_debug!("Drop DepthStencilImage");
        unsafe {
            let device = &self.device;
            vkDestroyImageView(device.handle(), self.view, std::ptr::null());
            // TODO(?): ImageMemory timing
            vkDestroyImage(device.handle(), self.image, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/swapchain.rs:169:1: 177:2'
source = '''
impl Drop for Swapchain {
    fn drop(&mut self) {
        log_debug!("Drop Swapchain");
        unsafe {
            let device = self.device_queues.device();
            vkDestroySwapchainKHR(device.handle(), self.handle, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/swapchain.rs:228:1: 236:2'
source = '''
impl Drop for SwapchainImage {
    fn drop(&mut self) {
        log_debug!("Drop SwapchainImage");
        unsafe {
            let device = &self.device;
            vkDestroyImageView(device.handle(), self.view, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/swapchain.rs:345:1: 353:2'
source = '''
impl Drop for SceneRenderPass {
    fn drop(&mut self) {
        log_debug!("Drop SceneRenderPass");
        unsafe {
            let device = &self.device;
            vkDestroyRenderPass(device.handle(), self.handle, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/swapchain.rs:456:1: 464:2'
source = '''
impl Drop for SwapchainFramebuffer {
    fn drop(&mut self) {
        log_debug!("Drop SwapchainFramebuffer");
        unsafe {
            let device = &self.device;
            vkDestroyFramebuffer(device.handle(), self.handle, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/render.rs:120:1: 127:2'
source = '''
impl Drop for Semaphore {
    fn drop(&mut self) {
        log_debug!("Drop Semaphore");
        unsafe {
            vkDestroySemaphore(self.device.handle(), self.handle, ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/offscreen.rs:127:1: 135:2'
source = '''
impl Drop for OffscreenRenderPass {
    fn drop(&mut self) {
        log_debug!("Drop OffscreenRenderPass");
        unsafe {
            let device = &self.device;
            vkDestroyRenderPass(device.handle(), self.handle, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/offscreen.rs:227:1: 235:2'
source = '''
impl Drop for OffscreenFramebuffer {
    fn drop(&mut self) {
        log_debug!("Drop OffscreenFramebuffer");
        unsafe {
            let device = &self.device;
            vkDestroyFramebuffer(device.handle(), self.handle, std::ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/offscreen.rs:269:1: 276:2'
source = '''
impl Drop for OffscreenGraphicsPipelineLayout {
    fn drop(&mut self) {
        log_debug!("Drop OffscreenGraphicsPipelineLayout");
        unsafe {
            vkDestroyPipelineLayout(self.device.handle(), self.handle, ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/raytrace.rs:443:1: 451:2'
source = '''
impl Drop for AccelerationStructure {
    fn drop(&mut self) {
        unsafe {
            log_debug!("Drop AccelerationStructure");
            vkDestroyAccelerationStructureKHR(self.device.handle(), self.handle, ptr::null());
            vkFreeMemory(self.device.handle(), self.memory, ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/raytrace.rs:827:1: 837:2'
source = '''
impl Drop for RayTracingGraphicsPipeline {
    fn drop(&mut self) {
        log_debug!("Drop RayTracingGraphicsPipeline");
        unsafe {
            let device = &self.device;
            vkDestroyPipelineLayout(device.handle(), self.layout, ptr::null());
            vkDestroyDescriptorSetLayout(device.handle(), self.descriptor_set_layout, ptr::null());
            vkDestroyPipeline(device.handle(), self.handle, ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/raytrace.rs:987:1: 994:2'
source = '''
impl Drop for RayTracingDescriptorSets {
    fn drop(&mut self) {
        unsafe {
            let device = &self.device;
            vkDestroyDescriptorPool(device.handle(), self.descriptor_pool, ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/scene.rs:123:1: 133:2'
source = '''
impl Drop for SceneGraphicsPipelineLayout {
    fn drop(&mut self) {
        log_debug!("Drop SceneGraphicsPipelineLayout");
        unsafe {
            let device = &self.device;
            vkDestroyPipelineLayout(device.handle(), self.handle, ptr::null());
            vkDestroyDescriptorSetLayout(device.handle(), self.descriptor_set_layout, ptr::null());
            vkDestroyDescriptorPool(device.handle(), self.descriptor_pool, ptr::null());
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/vk/scene.rs:338:1: 347:2'
source = '''
impl Drop for SceneGraphicsPipeline {
    fn drop(&mut self) {
        log_debug!("Drop SceneGraphicsPipeline");
        unsafe {
            let device = self.render_pass.device();
            vkDestroyPipelineCache(device.handle(), self.cache, ptr::null());
            vkDestroyPipeline(device.handle(), self.handle, ptr::null());
        }
    }
}'''
