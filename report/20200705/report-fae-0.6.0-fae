[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/renderer.rs:540:1: 575:2'
source = '''
impl Drop for Renderer {
    fn drop(&mut self) {
        if !gl::Viewport::is_loaded() {
            // Running without a valid gl context, no need to clean up
            // gl resources (because they can't have been allocated)
            return;
        }
        let legacy = self.legacy;
        for call in &self.calls {
            let ShaderProgram {
                program,
                vertex_shader,
                fragment_shader,
                ..
            } = call.program;
            let Attributes {
                vbo,
                vbo_static,
                element_buffer,
                vao,
                ..
            } = &call.attributes;
            unsafe {
                gl::DeleteShader(vertex_shader);
                gl::DeleteShader(fragment_shader);
                gl::DeleteProgram(program);
                gl::DeleteTextures(1, [call.texture.0].as_ptr());
                gl::DeleteBuffers(1, [vbo.0].as_ptr());
                if !legacy {
                    gl::DeleteBuffers(2, [vbo_static.0, element_buffer.0].as_ptr());
                    gl::DeleteVertexArrays(1, [vao.0].as_ptr());
                }
            }
        }
    }
}'''
