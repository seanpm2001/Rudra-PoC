[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ilib/atomic_set.rs:51:1: 58:2'
source = '''
impl<T: Send + Sync + Sized> Drop for AtomicSet<T> {
    fn drop(&mut self) {
        let ptr = self.item.load(Ordering::Relaxed);
        if ptr != null_mut::<T>() {
            drop(unsafe { Box::from_raw(ptr) });
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ilib/atomic_ref.rs:44:1: 51:2'
source = '''
impl<T: Send + Sync + ?Sized + 'static> Drop for AtomicRef<T> {
    fn drop(&mut self) {
        let ptr = self.item.load(Ordering::Relaxed);
        if ptr != null_mut() {
            drop(unsafe { Box::from_raw(ptr) });
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ilib/atomic.rs:43:1: 50:2'
source = '''
impl<T: Send + Sync + Clone + Copy + 'static> Drop for Atomic<T> {
    fn drop(&mut self) {
        let ptr = self.item.load(Ordering::Relaxed);
        if ptr != null_mut() {
            drop(unsafe { Box::from_raw(ptr) });
        }
    }
}'''
