[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:67:1: 77:2'
source = '''
impl<Y: Send + Sync + 'static, T: Poolable<Y> + 'static> Drop for Pool<Y, T> {
    fn drop(&mut self) {
        // at this point, no guards should be alive as they have references to Pool
        let mut items = self.items.swap(null_mut(), Ordering::Relaxed);
        while !items.is_null() {
            let next_items = unsafe { items.as_ref().unwrap() }.next;
            drop(unsafe { Box::from_raw(items) });
            items = next_items;
        }
    }
}'''
