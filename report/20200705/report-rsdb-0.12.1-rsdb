[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ds/dll.rs:14:1: 22:2'
source = '''
impl Drop for Node {
    fn drop(&mut self) {
        if !self.prev.is_null() {
            unsafe {
                drop(Box::from_raw(self.prev));
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ds/dll.rs:47:1: 55:2'
source = '''
impl Drop for Dll {
    fn drop(&mut self) {
        if !self.head.is_null() {
            unsafe {
                drop(Box::from_raw(self.head));
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ds/radix.rs:35:1: 56:2'
source = '''
impl<T: Send + 'static> Drop for Node<T> {
    fn drop(&mut self) {
        unsafe {
            pin(|scope| {
                let inner = self.inner.load(SeqCst, scope).as_raw();
                if !inner.is_null() {
                    drop(Box::from_raw(inner as *mut T));
                }

                let children: Vec<*const Node<T>> = self.children
                    .iter()
                    .map(|c| c.load(SeqCst, scope).as_raw())
                    .filter(|c| !c.is_null())
                    .collect();

                for child in children {
                    drop(Box::from_raw(child as *mut Node<T>));
                }
            })
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ds/radix.rs:76:1: 87:2'
source = '''
impl<T> Drop for Radix<T>
    where T: 'static + Send + Sync
{
    fn drop(&mut self) {
        unsafe {
            unprotected(|scope| {
                let head = self.head.load(SeqCst, scope).as_raw();
                drop(Box::from_raw(head as *mut Node<T>));
            })
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ds/stack.rs:17:1: 28:2'
source = '''
impl<T: Send + 'static> Drop for Node<T> {
    fn drop(&mut self) {
        unsafe {
            unprotected(|scope| {
                let next = self.next.load(Relaxed, scope).as_raw();
                if !next.is_null() {
                    drop(Box::from_raw(next as *mut Node<T>));
                }
            })
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ds/stack.rs:44:1: 55:2'
source = '''
impl<T: Send + 'static> Drop for Stack<T> {
    fn drop(&mut self) {
        unsafe {
            unprotected(|scope| {
                let curr = self.head.load(Relaxed, scope).as_raw();
                if !curr.is_null() {
                    drop(Box::from_raw(curr as *mut Node<T>));
                }
            })
        }
    }
}'''
