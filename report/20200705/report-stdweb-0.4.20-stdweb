[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/webcore/value.rs:89:1: 94:2'
source = '''
impl Drop for Reference {
    #[inline]
    fn drop( &mut self ) {
        __js_raw_asm!( "Module.STDWEB_PRIVATE.decrement_refcount( $0 );", self.0 );
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/webcore/serialization.rs:242:1: 249:2'
source = '''
impl< T > Drop for OwnedFfiSlice< T >  {
    fn drop( &mut self ) {
        assert_ne!( mem::size_of::< T >(), 0 );
        unsafe {
            ffi::dealloc( self.ptr as *mut u8, self.length * mem::size_of::< T >() );
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/webcore/symbol.rs:28:1: 34:2'
source = '''
impl Drop for Symbol {
    fn drop( &mut self ) {
        js!( @(no_return)
            Module.STDWEB_PRIVATE.unregister_raw_value( @{self.0} );
        );
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/webcore/global_arena.rs:122:1: 140:2'
source = '''
impl Drop for ArenaRestorePoint {
    fn drop( &mut self ) {
        unsafe {
            debug_assert!( ARENA.length >= self.arena_length );
            ARENA.length = self.arena_length;

            debug_assert!( VALUE_ARENA.length >= self.value_arena_length );
            let count = VALUE_ARENA.length - self.value_arena_length;
            if count > 0 {
                let mut vec = Vec::from_raw_parts( VALUE_ARENA.memory as *mut Value, VALUE_ARENA.length, VALUE_ARENA.capacity );
                vec.truncate( self.value_arena_length );
                VALUE_ARENA.memory = vec.as_mut_ptr() as *mut u8;
                VALUE_ARENA.length = vec.len();
                VALUE_ARENA.capacity = vec.capacity();
                mem::forget( vec );
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/webapi/mutation_observer.rs:180:1: 189:2'
source = '''
impl Drop for MutationObserverHandle {
    #[inline]
    fn drop( &mut self ) {
        self.disconnect();

        js! { @(no_return)
            @{&self.callback_reference}.drop();
        }
    }
}'''
