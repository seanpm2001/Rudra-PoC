[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/integer.rs:493:1: 507:2'
source = '''
impl Drop for Integer {
    fn drop(&mut self) {
        unsafe {
            let raw = self.as_raw();

            // This will ensure that the memory holding the integer data (the digits?) is
            // not leaked.
            imath_sys::mp_int_clear(raw);

            // This will ensure that the memory that held the `imath_sys::mpz_t` is not
            // leaked.
            drop(Box::from_raw(raw));
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/rational.rs:676:1: 690:2'
source = '''
impl Drop for Rational {
    fn drop(&mut self) {
        unsafe {
            let raw = self.as_raw();

            // This will ensure that the memory holding the rational data (the digits?) is
            // not leaked.
            imath_sys::mp_rat_clear(raw);

            // This will ensure that the memory that held the `imath_sys::mpq_t` is not
            // leaked.
            drop(Box::from_raw(raw));
        }
    }
}'''
