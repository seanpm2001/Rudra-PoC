[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:175:1: 189:2'
source = '''
impl<T: Columns> Drop for RawTable<T> {
    /// Free the underlying buffer but do not drop the arrays' elements.
    fn drop(&mut self) {
        unsafe {
            let align = *T::ALIGNS.iter().max().unwrap_or(&1);
            let mask = align - 1;

            let capacity = self.capacity;
            let size = T::SIZES.iter().map(move |&size| (capacity * size + mask) & !mask).sum();

            let layout = Layout::from_size_align_unchecked(size, align);
            if size > 0 { dealloc(self.pointers.borrow()[0].as_ptr(), layout); }
        }
    }
}'''
