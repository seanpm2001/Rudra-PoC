[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:1207:1: 1213:2'
source = '''
impl Drop for Layer {
    fn drop(&mut self) {
        unsafe {
            drop(Vec::from_raw_parts(self.bits, self.cap, self.cap));
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:1273:1: 1280:2'
source = '''
impl Drop for AtomicLayer {
    fn drop(&mut self) {
        // Safety: We keep track of the capacity internally.
        unsafe {
            drop(Vec::from_raw_parts(self.bits, self.cap, self.cap));
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:1504:5: 1508:6'
source = '''
impl<T> Drop for Layers<T> {
        fn drop(&mut self) {
            drop(unsafe { Vec::from_raw_parts(self.data as *mut T, self.len, self.cap) });
        }
    }'''
