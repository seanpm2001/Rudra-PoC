[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/safe/buffer/mod.rs:41:1: 49:2'
source = '''
impl<'a, H: HostAccess, T: MemSafe> Drop for Buffer<'a, H, T> {
    fn drop(&mut self) {
        unsafe {
            if let Err(e) = wrap_result!("clReleaseMemObject" => clReleaseMemObject(self.handle)) {
                log::warn!("Error releasing OpenCL mem object: {:?}: {:?}", self, e);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/safe/context.rs:24:1: 32:2'
source = '''
impl Drop for Context {
    fn drop(&mut self) {
        unsafe {
            if let Err(e) = wrap_result!("clReleaseContext" => clReleaseContext(self.0)) {
                log::warn!("Error releasing OpenCL context {:?}: {:?}", self, e);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/safe/kernel/mod.rs:29:1: 37:2'
source = '''
impl Drop for UnboundKernel {
    fn drop(&mut self) {
        unsafe {
            if let Err(e) = wrap_result!("clReleaseKernel" => clReleaseKernel(self.0)) {
                log::warn!("Error releasing OpenCL kernel: {:?}: {:?}", self, e);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/safe/program/mod.rs:30:1: 38:2'
source = '''
impl Drop for Program {
    fn drop(&mut self) {
        unsafe {
            if let Err(e) = wrap_result!("clReleaseProgram" => clReleaseProgram(self.0)) {
                log::warn!("Error releasing OpenCL program: {:?}: {:?}", self, e);
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/safe/queue/mod.rs:26:1: 34:2'
source = '''
impl Drop for Queue {
    fn drop(&mut self) {
        unsafe {
            if let Err(e) = wrap_result!("clReleaseCommandQueue" => clReleaseCommandQueue(self.0)) {
                log::warn!("Error releasing OpenCL command queue {:?}: {:?}", self, e);
            }
        }
    }
}'''
