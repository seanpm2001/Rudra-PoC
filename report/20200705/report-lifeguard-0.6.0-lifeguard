[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:273:1: 286:2'
source = '''
impl <P, T> Drop for RecycledInner<P, T> where P: Borrow<RefCell<CappedCollection<T>>>, T : Recycleable {
  #[inline] 
  fn drop(&mut self) {
    let value = mem::replace(&mut self.value, unsafe {mem::uninitialized()});
    let mut value = ManuallyDrop::into_inner(value);
    let pool_ref = self.pool.borrow();
    if pool_ref.borrow().is_full() {
      drop(value);
      return;
    }
    value.reset();
    pool_ref.borrow_mut().insert_prepared_value(value);
  }
}'''
