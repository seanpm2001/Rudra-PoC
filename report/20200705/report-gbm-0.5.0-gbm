[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/device.rs:288:1: 292:2'
source = '''
impl<T: AsRawFd + 'static> Drop for Device<T> {
    fn drop(&mut self) {
        unsafe { ::ffi::gbm_device_destroy(*self.ffi) };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/buffer_object.rs:123:1: 131:2'
source = '''
impl<'a, T: 'static> Drop for MappedBufferObject<'a, T> {
    fn drop(&mut self) {
        let ffi = match &self.bo {
            &BORef::Ref(bo) => bo.ffi,
            &BORef::Mut(ref bo) => bo.ffi,
        };
        unsafe { ::ffi::gbm_bo_unmap(ffi, self.addr) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/buffer_object.rs:418:1: 424:2'
source = '''
impl<T: 'static> Drop for BufferObject<T> {
    fn drop(&mut self) {
        if self._device.upgrade().is_some() {
            unsafe { ::ffi::gbm_bo_destroy(self.ffi) }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/surface.rs:33:1: 44:2'
source = '''
impl<T: 'static> Drop for SurfaceBufferHandle<T> {
    fn drop(&mut self) {
        if let Some(surface_ptr) = self.0.upgrade() {
            if self.1.as_ref().unwrap()._device.upgrade().is_some() {
                let mut bo = None;
                mem::swap(&mut bo, &mut self.1);
                unsafe { ::ffi::gbm_surface_release_buffer(*surface_ptr, bo.as_mut().unwrap().as_raw_mut()) };
                mem::forget(bo); // don't drop
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/surface.rs:140:1: 146:2'
source = '''
impl<T: 'static> Drop for Surface<T> {
    fn drop(&mut self) {
        if self._device.upgrade().is_some() {
            unsafe { ::ffi::gbm_surface_destroy(*self.ffi) }
        }
    }
}'''
