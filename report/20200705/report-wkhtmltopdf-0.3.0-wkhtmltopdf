[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lowlevel.rs:295:1: 302:2'
source = '''
impl Drop for PdfGlobalSettings {
    fn drop(&mut self) {
        if self.needs_delete {
            debug!("wkhtmltopdf_destroy_global_settings");
            unsafe { wkhtmltopdf_destroy_global_settings(self.global_settings); }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lowlevel.rs:304:1: 309:2'
source = '''
impl Drop for PdfConverter {
    fn drop(&mut self) {
        debug!("wkhtmltopdf_destroy_converter");
        unsafe { wkhtmltopdf_destroy_converter(self.converter) }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lowlevel.rs:311:1: 318:2'
source = '''
impl Drop for PdfObjectSettings {
    fn drop(&mut self) {
        if self.needs_delete {
            debug!("wkhtmltopdf_destroy_object_settings");
            unsafe { wkhtmltopdf_destroy_object_settings(self.object_settings); }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lowlevel.rs:329:1: 339:2'
source = '''
impl  Drop for PdfGuard {
    fn drop(&mut self) {
        let mut wk_state = WKHTMLTOPDF_STATE.lock().unwrap();
        debug!("wkhtmltopdf_deinit");
        let success = unsafe { wkhtmltopdf_deinit() == 1 };
        *wk_state = WkhtmltopdfState::Dropped;
        if !success {
            warn!("Failed to deinitialize wkhtmltopdf")
        }
    }
}'''
