[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lock.rs:146:1: 153:2'
source = '''
impl Drop for GuardRef {
    fn drop(&mut self) {
        unsafe {
            let lock: &mut Locked = &mut *(self.lock as *mut Locked);
            lock.release(Access::Read);
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lock.rs:154:1: 161:2'
source = '''
impl Drop for GuardMut {
    fn drop(&mut self) {
        unsafe {
            let lock: &mut Locked = &mut *self.lock;
            lock.release(Access::Write);
        }
    }
}'''
