[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/transaction.rs:141:1: 158:2'
source = '''
impl Drop for Env {
    #[cfg(feature = "mmap")]
    fn drop(&mut self) {
        for map in self.mmaps.borrow_mut().drain(..) {
            drop(map.mmap);
            drop(map.file);
        }
        if let Some(ref mut lock_file) = self.lock_file {
            lock_file.unlock().unwrap_or(());
        }
    }
    #[cfg(not(feature = "mmap"))]
    fn drop(&mut self) {
        for map in self.mmaps.borrow_mut().drain(..) {
            unsafe { std::alloc::dealloc(map.ptr, map.layout) }
        }
    }
}'''
