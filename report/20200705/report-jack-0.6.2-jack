[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/client/async_client.rs:126:1: 131:2'
source = '''
impl<N, P> Drop for AsyncClient<N, P> {
    /// Deactivate and close the client.
    fn drop(&mut self) {
        let _ = unsafe { self.maybe_deactivate() };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/client/client.rs:468:1: 480:2'
source = '''
impl Drop for Client {
    fn drop(&mut self) {
        let _ = CREATE_OR_DESTROY_CLIENT_MUTEX.lock().unwrap();

        debug_assert!(!self.raw().is_null()); // Rep invariant
                                              // Close the client
        sleep_on_test();
        let res = unsafe { j::jack_client_close(self.raw()) }; // close the client
        sleep_on_test();
        assert_eq!(res, 0);
        self.0 = ptr::null_mut();
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/ringbuffer.rs:84:1: 91:2'
source = '''
impl Drop for RingBuffer {
    fn drop(&mut self) {
        if !self.0.is_null() {
            unsafe { j::jack_ringbuffer_free(self.0) };
        }
        self.0 = std::ptr::null_mut();
    }
}'''
