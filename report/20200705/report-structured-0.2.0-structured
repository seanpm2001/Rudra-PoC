[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/memory.rs:113:1: 125:2'
source = '''
impl Drop for BufferData {
    /// Releases the underlying memory.
    fn drop(&mut self) {
        if self.owned {
            unsafe {
                dealloc(
                    self.ptr as *mut u8,
                    Layout::from_size_align_unchecked(self.len, ALIGNMENT),
                );
            }
        }
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/memory.rs:256:1: 265:2'
source = '''
impl Drop for BufferMut {
    fn drop(&mut self) {
        unsafe {
            dealloc(
                self.data.as_ptr(),
                Layout::from_size_align_unchecked(self.capacity, ALIGNMENT),
            );
        }
    }
}'''
