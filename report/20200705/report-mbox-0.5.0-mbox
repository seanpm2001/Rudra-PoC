[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/mbox.rs:370:1: 374:2'
source = '''
impl<T> Drop for MSliceBuilder<T> {
    fn drop(&mut self) {
        unsafe { self.as_mboxed_slice() };
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/mbox.rs:423:1: 433:2'
source = '''
impl<T> Drop for MSliceIntoIter<T> {
    fn drop(&mut self) {
        unsafe {
            let base = self.ptr.offset(self.begin as isize);
            let len = self.end - self.begin;
            let slice = from_raw_parts_mut(base, len) as *mut [T];
            drop_in_place(slice);
            gen_free(self.ptr);
        }
    }
}'''
