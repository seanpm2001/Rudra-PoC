[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/gc_arena.rs:109:1: 118:2'
source = '''
unsafe impl<#[may_dangle] 'gc> Drop for GcState<'gc> {
  fn drop(&mut self) {
    let mut cur_box = self.boxes;
    while let Some(gc_box_ptr) = cur_box {
      let gc_box = unsafe { Box::from_raw(gc_box_ptr.as_ptr()) };
      cur_box = (*gc_box).next;
      // Implicitly drops `gc_box` and frees the associated memory
    }
  }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/gc_ref_cell.rs:102:1: 111:2'
source = '''
impl<'a, T: Trace + 'a> Drop for GcRefMut<'a, T> {
  fn drop(&mut self) {
    // Restore the `rooted state` of the inner value before the call to `borrow_mut`
    if !self.rooted.get() {
      unsafe {
        self._ref.unroot();
      }
    }
  }
}'''
