[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/imgui_renderpass.rs:1083:1: 1130:2'
source = '''
impl Drop for VkImGuiRenderPass {
    fn drop(&mut self) {
        log::debug!("destroying VkImGuiRenderPass");

        fn drop_all_buffer_lists(buffer_list: &mut Vec<Vec<ManuallyDrop<VkBuffer>>>) {
            for buffers in buffer_list {
                for mut b in &mut *buffers {
                    unsafe {
                        ManuallyDrop::drop(&mut b);
                    }
                }
            }
        }

        unsafe {
            self.device.destroy_sampler(self.image_sampler, None);
            self.device.destroy_image_view(self.image_view, None);
            ManuallyDrop::drop(&mut self.image);

            for uniform_buffer in &mut self.uniform_buffers {
                ManuallyDrop::drop(uniform_buffer);
            }

            drop_all_buffer_lists(&mut self.vertex_buffers);
            drop_all_buffer_lists(&mut self.index_buffers);
            drop_all_buffer_lists(&mut self.staging_vertex_buffers);
            drop_all_buffer_lists(&mut self.staging_index_buffers);

            self.device.destroy_command_pool(self.command_pool, None);

            for frame_buffer in &self.frame_buffers {
                self.device.destroy_framebuffer(*frame_buffer, None);
            }

            self.device.destroy_pipeline(self.pipeline, None);
            self.device
                .destroy_pipeline_layout(self.pipeline_layout, None);
            self.device.destroy_render_pass(self.renderpass, None);

            self.device
                .destroy_descriptor_pool(self.descriptor_pool, None);
            self.device
                .destroy_descriptor_set_layout(self.descriptor_set_layout, None);
        }

        log::debug!("destroyed VkImGuiRenderPass");
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/image.rs:70:1: 81:2'
source = '''
impl Drop for VkImage {
    fn drop(&mut self) {
        log::debug!("destroying VkImage");

        unsafe {
            self.device.destroy_image(self.image, None);
            self.device.free_memory(self.image_memory, None);
        }

        log::debug!("destroyed VkImage");
    }
}'''
