[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:448:1: 462:2'
source = '''
impl<T, F, S> Drop for ScopeGuard<T, F, S>
    where F: FnOnce(T),
          S: Strategy
{
    fn drop(&mut self) {
        // This is OK because the fields are `ManuallyDrop`s
        // which will not be dropped by the compiler.
        let (value, dropfn) = unsafe {
            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
        };
        if S::should_run() {
            dropfn(value);
        }
    }
}'''
