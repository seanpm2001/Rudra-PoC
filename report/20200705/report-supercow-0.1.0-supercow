[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:1144:17: 1144:21'
source = 'impl'

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/lib.rs:1743:1: 1756:2'
source = '''
impl<'a, P> Drop for Ref<'a, P>
where P : RefParent + 'a {
    #[inline]
    fn drop(&mut self) {
        // The value of `OWNED::borrow()` may have changed, so recompute
        // everything instead of backing the old values up.
        //
        // Safety: The `Ref` could not have been constructed if the parent were
        // not in owned mode. We know there are no reborrows of `r` since the
        // borrow checker would have prevented that as it would also be a
        // borrow of `self`.
        unsafe { self.parent.supercow_ref_drop() }
    }
}'''
