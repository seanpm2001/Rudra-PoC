[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/compact_vec.rs:274:1: 280:2'
source = '''
impl<T, A: Allocator> Drop for CompactVec<T, A> {
    /// Drop elements and deallocate free heap storage, if any is allocated
    fn drop(&mut self) {
        unsafe { ptr::drop_in_place(&mut self[..]) };
        self.ptr.deallocate_if_free::<A>(self.cap as usize);
    }
}'''

[[reports]]
level = 'Warning'
analyzer = 'UnsafeDestructor'
description = 'unsafe block detected in drop'
location = 'src/compact_vec.rs:326:1: 337:2'
source = '''
impl<T, A: Allocator> Drop for IntoIter<T, A> {
    fn drop(&mut self) {
        // drop all remaining elements
        unsafe {
            ptr::drop_in_place(&mut ::std::slice::from_raw_parts(
                self.ptr.ptr().offset(self.index as isize),
                self.len,
            ))
        };
        self.ptr.deallocate_if_free::<A>(self.cap as usize);
    }
}'''
